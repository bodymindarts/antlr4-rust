//package antlr
//
//import (
//  "strconv"
//)
//
////
//// This implementation of {@link ANTLRErrorListener} can be used to identify
//// certain potential correctness and performance problems in grammars. "reports"
//// are made by calling {@link Parser//NotifyErrorListeners} with the appropriate
//// message.
////
//// <ul>
//// <li><b>Ambiguities</b>: These are cases where more than one path through the
//// grammar can Match the input.</li>
//// <li><b>Weak context sensitivity</b>: These are cases where full-context
//// prediction resolved an SLL conflict to a unique alternative which equaled the
//// minimum alternative of the SLL conflict.</li>
//// <li><b>Strong (forced) context sensitivity</b>: These are cases where the
//// full-context prediction resolved an SLL conflict to a unique alternative,
//// <em>and</em> the minimum alternative of the SLL conflict was found to not be
//// a truly viable alternative. Two-stage parsing cannot be used for inputs where
//// d situation occurs.</li>
//// </ul>
//
//pub struct DiagnosticErrorListener {
//  *DefaultErrorListener
//
//  exact_only: bool
//}
//
//impl DiagnosticErrorListener {ยง//  fn new(&self, exact_only: bool) -> *DiagnosticErrorListener {
//
//  let n = new(DiagnosticErrorListener);
//
//  // whether all ambiguities or only exact ambiguities are Reported.
//  self.exact_only = exact_only
//  return n
//}
//
//pub fn ReportAmbiguity(&self, recognizer Parser, dfa *DFA, start_index, stop_index i32, exact: bool, ambig_alts *BitSet, configs: ATNConfigSet) {
//  if self.exact_only && !exact {
//    return
//  }
//  let msg = "reportAmbiguity d=" +;
//    self.get_decision_description(recognizer, dfa) +
//    ": ambig_alts=" +
//    self.get_conflicting_alts(ambigAlts, configs).String() +
//    ", input='" +
//    recognizer.GetTokenStream().GetTextFromInterval(NewInterval(startIndex, stop_index)) + "'"
//  recognizer.NotifyErrorListeners(msg, nil, nil)
//}
//
//pub fn ReportAttemptingFullContext(&self, recognizer Parser, dfa *DFA, start_index, stop_index: i32, conflicting_alts *BitSet, configs: ATNConfigSet) {
//
//  let msg = "reportAttemptingFullContext d=" +;
//    self.get_decision_description(recognizer, dfa) +
//    ", input='" +
//    recognizer.GetTokenStream().GetTextFromInterval(NewInterval(startIndex, stop_index)) + "'"
//  recognizer.NotifyErrorListeners(msg, nil, nil)
//}
//
//pub fn ReportContextSensitivity(&self, recognizer Parser, dfa *DFA, start_index, stop_index, prediction: i32, configs: ATNConfigSet) {
//  let msg = "reportContextSensitivity d=" +;
//    self.get_decision_description(recognizer, dfa) +
//    ", input='" +
//    recognizer.GetTokenStream().GetTextFromInterval(NewInterval(startIndex, stop_index)) + "'"
//  recognizer.NotifyErrorListeners(msg, nil, nil)
//}
//
//fn get_decision_description(&self, recognizer: Parser, dfa *DFA) -> &str {
//  let decision = dfa.decision;
//  let rule_index = dfa.atn_start_state.GetRuleIndex();
//
//  let rule_names = recognizer.GetRuleNames();
//  if rule_index < 0 || rule_index >= len(ruleNames) {
//    return strconv.Itoa(decision)
//  }
//  let rule_name = rule_names[ruleIndex];
//  if rule_name == "" {
//    return strconv.Itoa(decision)
//  }
//  return strconv.Itoa(decision) + " (" + rule_name + ")"
//}
//
////
//// Computes the set of conflicting or ambiguous alternatives from a
//// configuration set, if that information was not already provided by the
//// parser.
////
//// @param ReportedAlts The set of conflicting or ambiguous alternatives, as
//// Reported by the parser.
//// @param configs The conflicting or ambiguous configuration set.
//// @return Returns {@code ReportedAlts} if it is not {@code nil}, otherwise
//// returns the set of alternatives represented in {@code configs}.
////
//fn get_conflicting_alts(&self, ReportedAlts *BitSet, set: ATNConfigSet) -> *BitSet {
//  if ReportedAlts != nil {
//    return ReportedAlts
//  }
//  let result = NewBitSet();
//  for _, let c = range set.GetItems() {;
//    result.add(self.GetAlt())
//  }
//
//  return result
//}
