//package antlr
//
//import "strconv"
//
//// Constants for serialization.
//const (
//  ATNStateInvalidType    = 0
//  ATNStateBasic          = 1
//  ATNStateRuleStart      = 2
//  ATNStateBlockStart     = 3
//  ATNStatePlusBlockStart = 4
//  ATNStateStarBlockStart = 5
//  ATNStateTokenStart     = 6
//  ATNStateRuleStop       = 7
//  ATNStateBlockEnd       = 8
//  ATNStateStarLoopBack   = 9
//  ATNStateStarLoopEntry  = 10
//  ATNStatePlusLoopBack   = 11
//  ATNStateLoopEnd        = 12
//
//  ATNStateInvalidStateNumber = -1
//)
//
//var ATNStateInitialNumTransitions = 4
//
//pub trait ATNState {
//  GetEpsilonOnlyTransitions() bool
//
//  GetRuleIndex() i32
//  SetRuleIndex(int)
//
//  GetNextTokenWithinRule() *IntervalSet
//  SetNextTokenWithinRule(*IntervalSet)
//
//  GetATN() *ATN
//  SetATN(*ATN)
//
//  GetStateType() i32
//
//  GetStateNumber() i32
//  SetStateNumber(int)
//
//  GetTransitions() []Transition
//  SetTransitions([]Transition)
//  AddTransition(Transition, i32)
//
//  String() &str
//}
//
//pub struct BaseATNState {
//  // NextTokenWithinRule caches lookahead during parsing. Not used during construction.
//  NextTokenWithinRule: *IntervalSet
//
//  // atn is the current ATN.
//  atn: *ATN
//
//  epsilon_only_transitions: bool
//
//  // rule_index tracks the Rule index because there are no Rule objects at runtime.
//  rule_index: i32
//
//  state_number: i32
//
//  state_type: i32
//
//  // Track the transitions emanating from this ATN state.
//  transitions []Transition
//}
//
//impl BaseATNState {§//  fn new(&self, ) -> *BaseATNState {
//  return &BaseATNState{stateNumber: ATNStateInvalidStateNumber, state_type: ATNStateInvalidType}
//}
//
//pub fn get_rule_index(&self, ) -> i32 {
//  return as.rule_index
//}
//
//pub fn set_rule_index(&self, v: i32) {
//  as.rule_index = v
//}
//pub fn get_epsilon_only_transitions(&self, ) -> bool {
//  return as.epsilon_only_transitions
//}
//
//pub fn get_a_t_n(&self, ) -> *ATN {
//  return as.atn
//}
//
//pub fn set_a_t_n(&self, atn *ATN) {
//  as.atn = atn
//}
//
//pub fn get_transitions(&self, ) -> []Transition {
//  return as.transitions
//}
//
//pub fn set_transitions(&self, t []Transition) {
//  as.transitions = t
//}
//
//pub fn get_state_type(&self, ) -> i32 {
//  return as.state_type
//}
//
//pub fn get_state_number(&self, ) -> i32 {
//  return as.state_number
//}
//
//pub fn set_state_number(&self, state_number: i32) {
//  as.state_number = state_number
//}
//
//pub fn get_next_token_within_rule(&self, ) -> *IntervalSet {
//  return as.next_token_within_rule
//}
//
//pub fn set_next_token_within_rule(&self, v *IntervalSet) {
//  as.next_token_within_rule = v
//}
//
//pub fn String(&self, ) -> &str {
//  return strconv.Itoa(as.state_number)
//}
//
//fn equals(&self, other i32erface{}) -> bool {
//  if ot, let ok = other.(ATNState); ok {;
//    return as.state_number == ot.get_state_number()
//  }
//
//  return false
//}
//
//fn is_non_greedy_exit_state(&self, ) -> bool {
//  return false
//}
//
//pub fn add_transition(&self, trans: Transition, index: i32) {
//  if len(as.transitions) == 0 {
//    as.epsilon_only_transitions = trans.get_is_epsilon()
//  } else if as.epsilon_only_transitions != trans.get_is_epsilon() {
//    as.epsilon_only_transitions = false
//  }
//
//  if index == -1 {
//    as.transitions = append(as.transitions, trans)
//  } else {
//    as.transitions = append(as.transitions[:index], append([]Transition{trans}, as.transitions[index:]...)...)
//    // TODO: as.transitions.splice(index, 1, trans)
//  }
//}
//
//pub struct BasicState {
//  *BaseATNState
//}
//
//impl BasicState {§//  fn new(&self, ) -> *BasicState {
//  let b = NewBaseATNState();
//
//  self.state_type = ATNStateBasic
//
//  return &BasicState{BaseATNState: b}
//}
//
//pub trait DecisionState {
//  ATNState
//
//  get_decision() i32
//  set_decision(int)
//
//  get_non_greedy() bool
//  set_non_greedy(bool)
//}
//
//pub struct BaseDecisionState {
//  *BaseATNState
//  decision:  i32
//  non_greedy: bool
//}
//
//impl BaseDecisionState {§//  fn new(&self, ) -> *BaseDecisionState {
//  return &BaseDecisionState{BaseATNState: NewBaseATNState(), decision: -1}
//}
//
//fn get_decision(&self, ) -> i32 {
//  return self.decision
//}
//
//fn set_decision(&self, b: i32) {
//  self.decision = b
//}
//
//fn get_non_greedy(&self, ) -> bool {
//  return self.non_greedy
//}
//
//fn set_non_greedy(&self, b: bool) {
//  self.non_greedy = b
//}
//
//pub trait BlockStartState {
//  DecisionState
//
//  get_end_state() *BlockEndState
//  set_end_state(*BlockEndState)
//}
//
//// BaseBlockStartState is the start of a regular (...) block.
//pub struct BaseBlockStartState {
//  *BaseDecisionState
//  end_state: *BlockEndState
//}
//
//impl BlockStartState {§//  fn new(&self, ) -> *BaseBlockStartState {
//  return &BaseBlockStartState{BaseDecisionState: NewBaseDecisionState()}
//}
//
//fn get_end_state(&self, ) -> *BlockEndState {
//  return self.end_state
//}
//
//fn set_end_state(&self, b *BlockEndState) {
//  self.end_state = b
//}
//
//pub struct BasicBlockStartState {
//  *BaseBlockStartState
//}
//
//impl BasicBlockStartState {§//  fn new(&self, ) -> *BasicBlockStartState {
//  let b = NewBlockStartState();
//
//  self.state_type = ATNStateBlockStart
//
//  return &BasicBlockStartState{BaseBlockStartState: b}
//}
//
//// BlockEndState is a terminal node of a simple (a|b|c) block.
//pub struct BlockEndState {
//  *BaseATNState
//  start_state: ATNState
//}
//
//impl BlockEndState {§//  fn new(&self, ) -> *BlockEndState {
//  let b = NewBaseATNState();
//
//  self.state_type = ATNStateBlockEnd
//
//  return &BlockEndState{BaseATNState: b}
//}
//
//// RuleStopState is the last node in the ATN for a rule, unless that rule is the
//// start symbol. In that case, there is one transition to EOF. Later, we might
//// encode references to all calls to this rule to compute FOLLOW sets for error
//// handling.
//pub struct RuleStopState {
//  *BaseATNState
//}
//
//impl RuleStopState {§//  fn new(&self, ) -> *RuleStopState {
//  let b = NewBaseATNState();
//
//  self.state_type = ATNStateRuleStop
//
//  return &RuleStopState{BaseATNState: b}
//}
//
//pub struct RuleStartState {
//  *BaseATNState
//  stop_state:        ATNState
//  is_precedence_rule: bool
//}
//
//impl RuleStartState {§//  fn new(&self, ) -> *RuleStartState {
//  let b = NewBaseATNState();
//
//  self.state_type = ATNStateRuleStart
//
//  return &RuleStartState{BaseATNState: b}
//}
//
//// PlusLoopbackState is a decision state for A+ and (A|B)+. It has two
//// transitions: one to the loop back to start of the block, and one to exit.
//pub struct PlusLoopbackState {
//  *BaseDecisionState
//}
//
//impl PlusLoopbackState {§//  fn new(&self, ) -> *PlusLoopbackState {
//  let b = NewBaseDecisionState();
//
//  self.state_type = ATNStatePlusLoopBack
//
//  return &PlusLoopbackState{BaseDecisionState: b}
//}
//
//// PlusBlockStartState is the start of a (A|B|...)+ loop. Technically it is a
//// decision state; we don't use it for code generation. Somebody might need it,
//// it is included for completeness. In reality, PlusLoopbackState is the real
//// decision-making node for A+.
//pub struct PlusBlockStartState {
//  *BaseBlockStartState
//  loop_back_state: ATNState
//}
//
//impl PlusBlockStartState {§//  fn new(&self, ) -> *PlusBlockStartState {
//  let b = NewBlockStartState();
//
//  self.state_type = ATNStatePlusBlockStart
//
//  return &PlusBlockStartState{BaseBlockStartState: b}
//}
//
//// StarBlockStartState is the block that begins a closure loop.
//pub struct StarBlockStartState {
//  *BaseBlockStartState
//}
//
//impl StarBlockStartState {§//  fn new(&self, ) -> *StarBlockStartState {
//  let b = NewBlockStartState();
//
//  self.state_type = ATNStateStarBlockStart
//
//  return &StarBlockStartState{BaseBlockStartState: b}
//}
//
//pub struct StarLoopbackState {
//  *BaseATNState
//}
//
//impl StarLoopbackState {§//  fn new(&self, ) -> *StarLoopbackState {
//  let b = NewBaseATNState();
//
//  self.state_type = ATNStateStarLoopBack
//
//  return &StarLoopbackState{BaseATNState: b}
//}
//
//pub struct StarLoopEntryState {
//  *BaseDecisionState
//  loop_back_state:          ATNState
//  precedence_rule_decision: bool
//}
//
//impl StarLoopEntryState {§//  fn new(&self, ) -> *StarLoopEntryState {
//  let b = NewBaseDecisionState();
//
//  self.state_type = ATNStateStarLoopEntry
//
//  // False precedence_rule_decision indicates whether s state can benefit from a precedence DFA during SLL decision making.
//  return &StarLoopEntryState{BaseDecisionState: b}
//}
//
//// LoopEndState marks the end of a * or + loop.
//pub struct LoopEndState {
//  *BaseATNState
//  loop_back_state: ATNState
//}
//
//impl LoopEndState {§//  fn new(&self, ) -> *LoopEndState {
//  let b = NewBaseATNState();
//
//  self.state_type = ATNStateLoopEnd
//
//  return &LoopEndState{BaseATNState: b}
//}
//
//// TokensStartState is the Tokens rule start state linking to each lexer rule start state.
//pub struct TokensStartState {
//  *BaseDecisionState
//}
//
//impl TokensStartState {§//  fn new(&self, ) -> *TokensStartState {
//  let b = NewBaseDecisionState();
//
//  self.state_type = ATNStateTokenStart
//
//  return &TokensStartState{BaseDecisionState: b}
//}
