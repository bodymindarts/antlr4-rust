//package antlr
//
//import "strconv"
//
//const (
//  LexerActionTypeChannel  = 0 //The type of a {@link LexerChannelAction} action.
//  LexerActionTypeCustom   = 1 //The type of a {@link LexerCustomAction} action.
//  LexerActionTypeMode     = 2 //The type of a {@link LexerModeAction} action.
//  LexerActionTypeMore     = 3 //The type of a {@link LexerMoreAction} action.
//  LexerActionTypePopMode  = 4 //The type of a {@link LexerPopModeAction} action.
//  LexerActionTypePushMode = 5 //The type of a {@link LexerPushModeAction} action.
//  LexerActionTypeSkip     = 6 //The type of a {@link LexerSkipAction} action.
//  LexerActionTypeType     = 7 //The type of a {@link LexerTypeAction} action.
//)
//
//pub trait LexerAction {
//  action_type() i32
//  is_position_dependent() bool
//  execute(lexer Lexer)
//  Hash() &str
//  equals(other LexerAction) bool
//}
//
//pub struct BaseLexerAction {
//  action_type:          i32
//  is_position_dependent: bool
//}
//
//impl BaseLexerAction {§//  fn new(&self, action: i32) -> *BaseLexerAction {
//  let la = new(BaseLexerAction);
//
//  la.action_type = action
//  la.is_position_dependent = false
//
//  return la
//}
//
//fn execute(&self, lexer: Lexer) {
//  panic("Not implemented")
//}
//
//fn action_type(&self) -> i32 {
//  return self.action_type
//}
//
//fn is_position_dependent(&self) -> bool {
//  return self.is_position_dependent
//}
//
//pub fn hash(&self) -> &str {
//  return strconv.itoa(self.action_type)
//}
//
//fn equals(&self, other: LexerAction) -> bool {
//  return b == other
//}
//
////
//// Implements the {@code Skip} lexer action by calling {@link Lexer//Skip}.
////
//// <p>The {@code Skip} command does not have any parameters, so l action is
//// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
//pub struct LexerSkipAction {
//  *BaseLexerAction
//}
//
//impl LexerSkipAction {§//  fn new(&self) -> *LexerSkipAction {
//  let la = new(LexerSkipAction);
//  la.base_lexer_action = NewBaseLexerAction(LexerActionTypeSkip)
//  return la
//}
//
//// Provides a singleton instance of l parameterless lexer action.
//var LexerSkipActionINSTANCE = NewLexerSkipAction()
//
//fn execute(&self, lexer: Lexer) {
//  lexer.skip()
//}
//
//pub fn string(&self) -> &str {
//  return "skip"
//}
//
////  Implements the {@code type} lexer action by calling {@link Lexer//setType}
//// with the assigned type.
//pub struct LexerTypeAction {
//  *BaseLexerAction
//
//  thetype: i32
//}
//
//impl LexerTypeAction {§//  fn new(&self, thetype: i32) -> *LexerTypeAction {
//  let l = new(LexerTypeAction);
//  self.base_lexer_action = NewBaseLexerAction(LexerActionTypeType)
//  self.thetype = thetype
//  return l
//}
//
//fn execute(&self, lexer: Lexer) {
//  lexer.set_type(self.thetype)
//}
//
//pub fn hash(&self) -> &str {
//  return strconv.itoa(self.action_type) + strconv.itoa(self.thetype)
//}
//
//fn equals(&self, other: LexerAction) -> bool {
//  if l == other {
//    return true
//  } else if _, let ok = other.(*LexerTypeAction); !ok {;
//    return false
//  } else {
//    return self.thetype == other.(*LexerTypeAction).thetype
//  }
//}
//
//pub fn string(&self) -> &str {
//  return "actionType(" + strconv.itoa(self.thetype) + ")"
//}
//
//// Implements the {@code push_mode} lexer action by calling
//// {@link Lexer//pushMode} with the assigned mode.
//pub struct LexerPushModeAction {
//  *BaseLexerAction
//
//  mode: i32
//}
//
//impl LexerPushModeAction {§//  fn new(&self, mode: i32) -> *LexerPushModeAction {
//
//  let l = new(LexerPushModeAction);
//  self.base_lexer_action = NewBaseLexerAction(LexerActionTypePushMode)
//
//  self.mode = mode
//  return l
//}
//
//// <p>This action is implemented by calling {@link Lexer//pushMode} with the
//// value provided by {@link //getMode}.</p>
//fn execute(&self, lexer: Lexer) {
//  lexer.push_mode(self.mode)
//}
//
//pub fn hash(&self) -> &str {
//  return strconv.itoa(self.action_type) + strconv.itoa(self.mode)
//}
//
//fn equals(&self, other: LexerAction) -> bool {
//  if l == other {
//    return true
//  } else if _, let ok = other.(*LexerPushModeAction); !ok {;
//    return false
//  } else {
//    return self.mode == other.(*LexerPushModeAction).mode
//  }
//}
//
//pub fn string(&self) -> &str {
//  return "pushMode(" + strconv.itoa(self.mode) + ")"
//}
//
//// Implements the {@code pop_mode} lexer action by calling {@link Lexer//popMode}.
////
//// <p>The {@code pop_mode} command does not have any parameters, so l action is
//// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
//pub struct LexerPopModeAction {
//  *BaseLexerAction
//}
//
//impl LexerPopModeAction {§//  fn new(&self) -> *LexerPopModeAction {
//
//  let l = new(LexerPopModeAction);
//
//  self.base_lexer_action = NewBaseLexerAction(LexerActionTypePopMode)
//
//  return l
//}
//
//var LexerPopModeActionINSTANCE = NewLexerPopModeAction()
//
//// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
//fn execute(&self, lexer: Lexer) {
//  lexer.pop_mode()
//}
//
//pub fn string(&self) -> &str {
//  return "popMode"
//}
//
//// Implements the {@code more} lexer action by calling {@link Lexer//more}.
////
//// <p>The {@code more} command does not have any parameters, so l action is
//// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
//
//pub struct LexerMoreAction {
//  *BaseLexerAction
//}
//
//impl LexerMoreAction {§//  fn new(&self) -> *LexerMoreAction {
//  let l = new(LexerMoreAction);
//  self.base_lexer_action = NewBaseLexerAction(LexerActionTypeMore)
//
//  return l
//}
//
//var LexerMoreActionINSTANCE = NewLexerMoreAction()
//
//// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
//fn execute(&self, lexer: Lexer) {
//  lexer.more()
//}
//
//pub fn string(&self) -> &str {
//  return "more"
//}
//
//// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
//// the assigned mode.
//pub struct LexerModeAction {
//  *BaseLexerAction
//
//  mode: i32
//}
//
//impl LexerModeAction {§//  fn new(&self, mode: i32) -> *LexerModeAction {
//  let l = new(LexerModeAction);
//  self.base_lexer_action = NewBaseLexerAction(LexerActionTypeMode)
//  self.mode = mode
//  return l
//}
//
//// <p>This action is implemented by calling {@link Lexer//mode} with the
//// value provided by {@link //getMode}.</p>
//fn execute(&self, lexer: Lexer) {
//  lexer.set_mode(self.mode)
//}
//
//pub fn hash(&self) -> &str {
//  return strconv.itoa(self.action_type) + strconv.itoa(self.mode)
//}
//
//fn equals(&self, other: LexerAction) -> bool {
//  if l == other {
//    return true
//  } else if _, let ok = other.(*LexerModeAction); !ok {;
//    return false
//  } else {
//    return self.mode == other.(*LexerModeAction).mode
//  }
//}
//
//pub fn string(&self) -> &str {
//  return "mode(" + strconv.itoa(self.mode) + ")"
//}
//
//// Executes a custom lexer action by calling {@link Recognizer//action} with the
//// rule and action indexes assigned to the custom action. The implementation of
//// a custom action is added to the generated code for the lexer in an override
//// of {@link Recognizer//action} when the grammar is compiled.
////
//// <p>This class may represent embedded actions created with the <code>{...}</code>
//// syntax in ANTLR 4, as well as actions created for lexer commands where the
//// command argument could not be evaluated when the grammar was compiled.</p>
//
//// Constructs a custom lexer action with the specified rule and action
//// indexes.
////
//// @param rule_index The rule index to use for calls to
//// {@link Recognizer//action}.
//// @param action_index The action index to use for calls to
//// {@link Recognizer//action}.
//
//pub struct LexerCustomAction {
//  *BaseLexerAction
//  rule_index, action_index i32
//}
//
//impl LexerCustomAction {§//  fn new(&self, rule_index, action_index: i32) -> *LexerCustomAction {
//  let l = new(LexerCustomAction);
//  self.base_lexer_action = NewBaseLexerAction(LexerActionTypeCustom)
//  self.rule_index = rule_index
//  self.action_index = action_index
//  self.is_position_dependent = true
//  return l
//}
//
//// <p>Custom actions are implemented by calling {@link Lexer//action} with the
//// appropriate rule and action indexes.</p>
//fn execute(&self, lexer: Lexer) {
//  lexer.action(nil, self.rule_index, self.action_index)
//}
//
//pub fn hash(&self) -> &str {
//  return strconv.itoa(self.action_type) + strconv.itoa(self.rule_index) + strconv.itoa(self.action_index)
//}
//
//fn equals(&self, other: LexerAction) -> bool {
//  if l == other {
//    return true
//  } else if _, let ok = other.(*LexerCustomAction); !ok {;
//    return false
//  } else {
//    return self.rule_index == other.(*LexerCustomAction).rule_index && self.action_index == other.(*LexerCustomAction).action_index
//  }
//}
//
//// Implements the {@code channel} lexer action by calling
//// {@link Lexer//setChannel} with the assigned channel.
//// Constructs a New{@code channel} action with the specified channel value.
//// @param channel The channel value to pass to {@link Lexer//setChannel}.
//pub struct LexerChannelAction {
//  *BaseLexerAction
//
//  channel: i32
//}
//
//impl LexerChannelAction {§//  fn new(&self, channel: i32) -> *LexerChannelAction {
//  let l = new(LexerChannelAction);
//  self.base_lexer_action = NewBaseLexerAction(LexerActionTypeChannel)
//  self.channel = channel
//  return l
//}
//
//// <p>This action is implemented by calling {@link Lexer//setChannel} with the
//// value provided by {@link //getChannel}.</p>
//fn execute(&self, lexer: Lexer) {
//  lexer.set_channel(self.channel)
//}
//
//pub fn hash(&self) -> &str {
//  return strconv.itoa(self.action_type) + strconv.itoa(self.channel)
//}
//
//fn equals(&self, other: LexerAction) -> bool {
//  if l == other {
//    return true
//  } else if _, let ok = other.(*LexerChannelAction); !ok {;
//    return false
//  } else {
//    return self.channel == other.(*LexerChannelAction).channel
//  }
//}
//
//pub fn string(&self) -> &str {
//  return "channel(" + strconv.itoa(self.channel) + ")"
//}
//
//// This implementation of {@link LexerAction} is used for tracking input offsets
//// for position-dependent actions within a {@link LexerActionExecutor}.
////
//// <p>This action is not serialized as part of the ATN, and is only required for
//// position-dependent lexer actions which appear at a location other than the
//// end of a rule. For more information about DFA optimizations employed for
//// lexer actions, see {@link LexerActionExecutor//append} and
//// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>
//
//// Constructs a Newindexed custom action by associating a character offset
//// with a {@link LexerAction}.
////
//// <p>Note: This class is only required for lexer actions for which
//// {@link LexerAction//isPositionDependent} returns {@code true}.</p>
////
//// @param offset The offset i32o the input {@link CharStream}, relative to
//// the token start index, at which the specified lexer action should be
//// executed.
//// @param action The lexer action to execute at a particular offset in the
//// input {@link CharStream}.
//pub struct LexerIndexedCustomAction {
//  *BaseLexerAction
//
//  offset:              i32
//  lexer_action:         LexerAction
//  is_position_dependent: bool
//}
//
//impl LexerIndexedCustomAction {§//  fn new(&self, offset: i32, lexer_action: LexerAction) -> *LexerIndexedCustomAction {
//
//  let l = new(LexerIndexedCustomAction);
//  self.base_lexer_action = NewBaseLexerAction(lexerAction.action_type())
//
//  self.offset = offset
//  self.lexer_action = lexer_action
//  self.is_position_dependent = true
//
//  return l
//}
//
//// <p>This method calls {@link //execute} on the result of {@link //getAction}
//// using the provided {@code lexer}.</p>
//fn execute(&self, lexer: Lexer) {
//  // assume the input stream position was properly set by the calling code
//  self.lexer_action.execute(lexer)
//}
//
//pub fn hash(&self) -> &str {
//  return strconv.itoa(self.action_type) + strconv.itoa(self.offset) + self.lexer_action.hash()
//}
//
//fn equals(&self, other: LexerAction) -> bool {
//  if l == other {
//    return true
//  } else if _, let ok = other.(*LexerIndexedCustomAction); !ok {;
//    return false
//  } else {
//    return self.offset == other.(*LexerIndexedCustomAction).offset && self.lexer_action == other.(*LexerIndexedCustomAction).lexer_action
//  }
//}
