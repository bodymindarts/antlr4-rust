//package antlr
//
//import (
//  "fmt"
//  "strings"
//
//  "strconv"
//)
//
//pub trait Recognizer {
//  GetLiteralNames() []string
//  GetSymbolicNames() []string
//  GetRuleNames() []string
//
//  Sempred(RuleContext, i32, i32) bool
//  Precpred(RuleContext, i32) bool
//
//  GetState() i32
//  SetState(int)
//  Action(RuleContext, i32, i32)
//  AddErrorListener(ErrorListener)
//  RemoveErrorListeners()
//  GetATN() *ATN
//  GetErrorListenerDispatch() ErrorListener
//}
//
//pub struct BaseRecognizer {
//  listeners []ErrorListener
//  state:     i32
//
//  RuleNames       []string
//  LiteralNames    []string
//  SymbolicNames   []string
//  GrammarFileName: &str
//}
//
//impl BaseRecognizer {ยง//  fn new(&self) -> *BaseRecognizer {
//  let rec = new(BaseRecognizer);
//  rec.listeners = []ErrorListener{ConsoleErrorListenerINSTANCE}
//  rec.state = -1
//  return rec
//}
//
//var token_type_map_cache = make(map[string]int)
//var rule_index_map_cache = make(map[string]int)
//
//fn check_version(&self, tool_version: &str) {
//  let runtime_version = "4.6";
//  if runtime_version != tool_version {
//    println!("ANTLR runtime and generated code versions disagree: " + runtime_version + "!=" + tool_version)
//  }
//}
//
//pub fn action(&self, context RuleContext,: rule_index, action_index: i32) {
//  panic!("action not implemented on Recognizer!")
//}
//
//pub fn add_error_listener(&self, listener: ErrorListener) {
//  self.listeners = append(self.listeners, listener)
//}
//
//pub fn remove_error_listeners(&self) {
//  self.listeners = make([]ErrorListener, 0)
//}
//
//pub fn rule_names(&self) -> []string {
//  return self.rule_names
//}
//
//pub fn token_names(&self) -> []string {
//  return self.literal_names
//}
//
//pub fn symbolic_names(&self) -> []string {
//  return self.symbolic_names
//}
//
//pub fn literal_names(&self) -> []string {
//  return self.literal_names
//}
//
//pub fn state(&self) -> i32 {
//  return self.state
//}
//
//pub fn set_state(&self, v: i32) {
//  self.state = v
//}
//
////pub fn token_type_map(&self) {
////    var token_names = self.token_names()
////    if (tokenNames==nil) {
////        panic!("The current recognizer does not provide a list of token names.")
////    }
////    var result = token_type_map_cache[tokenNames]
////    if(result==nil) {
////        result = token_names.reduce(function(o, k, i) { o[k] = i })
////        result.e_o_f = TokenEOF
////        token_type_map_cache[tokenNames] = result
////    }
////    return result
////}
//
//// Get a map from rule names to rule indexes.
////
//// <p>Used for XPath and tree pattern compilation.</p>
////
//pub fn rule_index_map(&self) -> map[string]int {
//
//  panic!("Method not defined!")
//  //    var rule_names = self.rule_names()
//  //    if (ruleNames==nil) {
//  //        panic!("The current recognizer does not provide a list of rule names.")
//  //    }
//  //
//  //    var result = rule_index_map_cache[ruleNames]
//  //    if(result==nil) {
//  //        result = rule_names.reduce(function(o, k, i) { o[k] = i })
//  //        rule_index_map_cache[ruleNames] = result
//  //    }
//  //    return result
//}
//
//pub fn token_type(&self, token_name: &str) -> i32 {
//  panic!("Method not defined!")
//  //    var ttype = self.token_type_map()[tokenName]
//  //    if (ttype !=nil) {
//  //        return ttype
//  //    } else {
//  //        return TokenInvalidType
//  //    }
//}
//
////pub fn token_type_map(&self) -> map[string]int {
////    Vocabulary vocabulary = vocabulary()
////
////    Synchronized (tokenTypeMapCache) {
////        Map<String, Integer> result = token_type_map_cache.get(vocabulary)
////        if (result == null) {
////            result = new HashMap<String, Integer>()
////            for (int i = 0; i < GetATN().max_token_type; i++) {
////                String literal_name = vocabulary.literal_name(i)
////                if (literalName != null) {
////                    result.put(literalName, i)
////                }
////
////                String symbolic_name = vocabulary.symbolic_name(i)
////                if (symbolicName != null) {
////                    result.put(symbolicName, i)
////                }
////            }
////
////            result.put("EOF", Token.e_o_f)
////            result = Collections.unmodifiable_map(result)
////            token_type_map_cache.put(vocabulary, result)
////        }
////
////        return result
////    }
////}
//
//// What is the error header, normally line/character position information?//
//pub fn error_header(&self, e: RecognitionException) -> &str {
//  let line = self.offending_token().line();
//  let column = self.offending_token().column();
//  return "line " + strconv.itoa(line) + ":" + strconv.itoa(column)
//}
//
//// How should a token be displayed in an error message? The default
////  is to display just the text, but during development you might
////  want to have a lot of information spit out.  Override in that case
////  to use self.string() (which, for CommonToken, dumps everything about
////  the token). This is better than forcing you to override a method in
////  your token objects because you don't have to go modify your lexer
////  so that it creates a NewJava type.
////
//// @deprecated This method is not called by the ANTLR 4 Runtime. Specific
//// implementations of {@link ANTLRErrorStrategy} may provide a similar
//// feature when necessary. For example, see
//// {@link DefaultErrorStrategy//GetTokenErrorDisplay}.
////
//pub fn token_error_display(&self, t: Token) -> &str {
//  if t == nil {
//    return "<no token>"
//  }
//  let s = self.text();
//  if s == "" {
//    if self.token_type() == TokenEOF {
//      s = "<EOF>"
//    } else {
//      s = "<" + strconv.itoa(self.token_type()) + ">"
//    }
//  }
//  s = &strs.replace(s, "\t", "\\t", -1)
//  s = &strs.replace(s, "\n", "\\n", -1)
//  s = &strs.replace(s, "\r", "\\r", -1)
//
//  return "'" + s + "'"
//}
//
//pub fn error_listener_dispatch(&self) -> ErrorListener {
//  return NewProxyErrorListener(self.listeners)
//}
//
//// subclass needs to override these if there are sempreds or actions
//// that the ATN i32erp needs to execute
//pub fn sempred(&self, localctx RuleContext, rule_index: i32, action_index: i32) -> bool {
//  return true
//}
//
//pub fn precpred(&self, localctx: RuleContext, precedence: i32) -> bool {
//  return true
//}
