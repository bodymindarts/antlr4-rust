//package antlr
//
//import "sort"
//
//pub struct DFA {
//  // atn_start_state is the ATN state in which this was created
//  atn_start_state: DecisionState
//
//  decision: i32
//
//  // states is all the DFA states. Use Map to get the old state back; Set can only
//  // indicate whether it is there.
//  states map[string]*DFAState
//
//  s0 *DFAState
//
//  // precedence_dfa is the backing field for is_precedence_dfa and set_precedence_dfa.
//  // True if the DFA is for a precedence decision and false otherwise.
//  precedence_dfa: bool
//}
//
//impl DFA {ยง//  fn new(&self, atn_start_state: DecisionState, decision: i32) -> *DFA {
//  return &DFA{
//    atn_start_state: atn_start_state,
//    decision:      decision,
//    states:        make(map[string]*DFAState),
//  }
//}
//
//// precedence_start_state gets the start state for the current precedence and
//// returns the start state corresponding to the specified precedence if a start
//// state exists for the specified precedence and nil otherwise. d must be a
//// precedence DFA. See also is_precedence_dfa.
//fn precedence_start_state(&self, precedence: i32) -> *DFAState {
//  if !self.precedence_dfa {
//    panic("only precedence DFAs may contain a precedence start state")
//  }
//
//  // s0.edges is never nil for a precedence DFA
//  if precedence < 0 || precedence >= len(self.s0.edges) {
//    return nil
//  }
//
//  return self.s0.edges[precedence]
//}
//
//// set_precedence_start_state sets the start state for the current precedence. d
//// must be a precedence DFA. See also is_precedence_dfa.
//fn set_precedence_start_state(&self, precedence: i32, start_state *DFAState) {
//  if !self.precedence_dfa {
//    panic("only precedence DFAs may contain a precedence start state")
//  }
//
//  if precedence < 0 {
//    return
//  }
//
//  // Synchronization on s0 here is ok. When the DFA is turned i32o a
//  // precedence DFA, s0 will be initialized once and not updated again. s0.edges
//  // is never nil for a precedence DFA.
//  if precedence >= len(self.s0.edges) {
//    self.s0.edges = append(self.s0.edges, make([]*DFAState, precedence+1-len(self.s0.edges))...)
//  }
//
//  self.s0.edges[precedence] = start_state
//}
//
//// set_precedence_dfa sets whether d is a precedence DFA. If precedence_dfa differs
//// from the current DFA configuration, then self.states is cleared, the initial
//// state s0 is set to a new DFAState with an empty outgoing DFAState.edges to
//// store the start states for individual precedence values if precedence_dfa is
//// true or nil otherwise, and self.precedence_dfa is updated.
//fn set_precedence_dfa(&self, precedence_dfa: bool) {
//  if self.precedence_dfa != precedence_dfa {
//    self.states = make(map[string]*DFAState)
//
//    if precedence_dfa {
//      let precedence_state = NewDFAState(-1, NewBaseATNConfigSet(false));
//
//      precedence_state.edges = make([]*DFAState, 0)
//      precedence_state.is_accept_state = false
//      precedence_state.requires_full_context = false
//      self.s0 = precedence_state
//    } else {
//      self.s0 = nil
//    }
//
//    self.precedence_dfa = precedence_dfa
//  }
//}
//
//pub fn states(&self) -> map[string]*DFAState {
//  return self.states
//}
//
//type DFAStateList []*DFAState
//
//pub fn len() i32           { return len(d) -> }
//pub fn less(i, j: i32) -> bool { return d[i].state_number < d[j].state_number }
//pub fn swap(i, j: i32) ->      { d[i], d[j] = d[j], d[i] }
//
//// sorted_states returns the states in d sorted by their state number.
//fn sorted_states(&self) -> []*DFAState {
//  let vs = make([]*DFAState, 0, len(self.states));
//
//  for _, let v = range self.states {;
//    vs = append(vs, v)
//  }
//
//  sort.sort(DFAStateList(vs))
//
//  return vs
//}
//
//pub fn string(&self, literal_names []string, symbolic_names []string) -> &str {
//  if self.s0 == nil {
//    return ""
//  }
//
//  return DFASerializer::new(d, literal_names, symbolic_names).string()
//}
//
//pub fn to_lexer_string(&self) -> &str {
//  if self.s0 == nil {
//    return ""
//  }
//
//  return LexerDFASerializer::new(d).string()
//}
