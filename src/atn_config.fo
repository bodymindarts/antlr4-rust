//package antlr
//
//import (
//  "fmt"
//  "strconv"
//)
//
//pub trait Comparable {
//  equals(other i32erface{}) bool
//}
//
//// ATNConfig is a tuple: (ATN state, predicted alt, syntactic, semantic
//// context). The syntactic context is a graph-structured stack node whose
//// path(s) to the root is the rule invocation(s) chain used to arrive at the
//// state. The semantic context is the tree of semantic predicates encountered
//// before reaching an ATN state.
//pub trait ATNConfig {
//  Hasher
//  Comparable
//
//  GetState() ATNState
//  GetAlt() i32
//  GetSemanticContext() SemanticContext
//
//  GetContext() PredictionContext
//  SetContext(PredictionContext)
//
//  GetReachesIntoOuterContext() i32
//  SetReachesIntoOuterContext(int)
//
//  String() &str
//
//  precedence_filter_suppressed() bool
//  set_precedence_filter_suppressed(bool)
//
//  short_hash() &str
//}
//
//pub struct BaseATNConfig {
//  precedence_filter_suppressed: bool
//  state:                      ATNState
//  alt:                        i32
//  context:                    PredictionContext
//  semantic_context:            SemanticContext
//  reaches_into_outer_context:    i32
//}
//
//impl BaseATNConfig {§//  fn new7(old *BaseATNConfig) -> *BaseATNConfig { // TODO: Dup
//  return &BaseATNConfig{
//    state:                   old.state,
//    alt:                     old.alt,
//    context:                 old.context,
//    semantic_context:         old.semantic_context,
//    reaches_into_outer_context: old.reaches_into_outer_context,
//  }
//}
//
//impl BaseATNConfig {§//  fn new6(&self, state ATNState, alt: i32, context: PredictionContext) -> *BaseATNConfig {
//  return BaseATNConfig5::new(state, alt, context, SemanticContextNone)
//}
//
//impl BaseATNConfig {§//  fn new5(&self, state ATNState, alt i32, context: PredictionContext, semantic_context: SemanticContext) -> *BaseATNConfig {
//  if semantic_context == nil {
//    panic!("semanticContext cannot be nil") // TODO: Necessary?
//  }
//
//  return &BaseATNConfig{state: state, alt: alt, context: context, semantic_context: semantic_context}
//}
//
//impl BaseATNConfig {§//  fn new4(&self, c: ATNConfig, state: ATNState) -> *BaseATNConfig {
//  return BaseATNConfig::new(c, state, self.context(), self.semantic_context())
//}
//
//impl BaseATNConfig {§//  fn new3(&self, c ATNConfig, state: ATNState, semantic_context: SemanticContext) -> *BaseATNConfig {
//  return BaseATNConfig::new(c, state, self.context(), semantic_context)
//}
//
//impl BaseATNConfig {§//  fn new2(&self, c: ATNConfig, semantic_context: SemanticContext) -> *BaseATNConfig {
//  return BaseATNConfig::new(c, self.state(), self.context(), semantic_context)
//}
//
//impl BaseATNConfig {§//  fn new1(&self, c ATNConfig, state: ATNState, context: PredictionContext) -> *BaseATNConfig {
//  return BaseATNConfig::new(c, state, context, self.semantic_context())
//}
//
//impl BaseATNConfig {§//  fn new(&self, c ATNConfig, state ATNState, context: PredictionContext, semantic_context: SemanticContext) -> *BaseATNConfig {
//  if semantic_context == nil {
//    panic!("semanticContext cannot be nil")
//  }
//
//  return &BaseATNConfig{
//    state:                   state,
//    alt:                     self.alt(),
//    context:                 context,
//    semantic_context:         semantic_context,
//    reaches_into_outer_context: self.reaches_into_outer_context(),
//    precedence_filter_suppressed: self.precedence_filter_suppressed(),
//  }
//}
//
//fn precedence_filter_suppressed(&self) -> bool {
//  return self.precedence_filter_suppressed
//}
//
//fn set_precedence_filter_suppressed(&self, v: bool) {
//  self.precedence_filter_suppressed = v
//}
//
//pub fn state(&self) -> ATNState {
//  return self.state
//}
//
//pub fn alt(&self) -> i32 {
//  return self.alt
//}
//
//pub fn set_context(&self, v: PredictionContext) {
//  self.context = v
//}
//pub fn context(&self) -> PredictionContext {
//  return self.context
//}
//
//pub fn semantic_context(&self) -> SemanticContext {
//  return self.semantic_context
//}
//
//pub fn reaches_into_outer_context(&self) -> i32 {
//  return self.reaches_into_outer_context
//}
//
//pub fn set_reaches_into_outer_context(&self, v: i32) {
//  self.reaches_into_outer_context = v
//}
//
//// An ATN configuration is equal to another if both have the same state, they
//// predict the same alternative, and syntactic/semantic contexts are the same.
//fn equals(&self, o i32erface{}) -> bool {
//  if b == o {
//    return true
//  }
//
//  var other, ok = o.(*BaseATNConfig)
//
//  if !ok {
//    return false
//  }
//
//  var equal bool
//
//  if self.context == nil {
//    equal = other.context == nil
//  } else {
//    equal = self.context.equals(other.context)
//  }
//
//  var (
//    nums = self.state.state_number() == other.state.state_number()
//    alts = self.alt == other.alt
//    cons = self.semantic_context.equals(other.semantic_context)
//    sups = self.precedence_filter_suppressed == other.precedence_filter_suppressed
//  )
//
//  return nums && alts && cons && sups && equal
//}
//
//fn short_hash(&self) -> &str {
//  return strconv.itoa(self.state.state_number()) + "/" + strconv.itoa(self.alt) + "/" + self.semantic_context.string()
//}
//
//pub fn hash(&self) -> &str {
//  var c &str
//
//  if self.context == nil {
//    c = ""
//  } else {
//    c = self.context.hash()
//  }
//
//  return strconv.itoa(self.state.state_number()) + "/" + strconv.itoa(self.alt) + "/" + c + "/" + self.semantic_context.string()
//}
//
//pub fn string(&self) -> &str {
//  var s1, s2, s3 &str
//
//  if self.context != nil {
//    s1 = ",[" + fmt.sprint(self.context) + "]"
//  }
//
//  if self.semantic_context != SemanticContextNone {
//    s2 = "," + fmt.sprint(self.semantic_context)
//  }
//
//  if self.reaches_into_outer_context > 0 {
//    s3 = ",up=" + fmt.sprint(self.reaches_into_outer_context)
//  }
//
//  return fmt.sprintf("(%v,%v%v%v%v)", self.state, self.alt, s1, s2, s3)
//}
//
//
//
//pub struct LexerATNConfig {
//  *BaseATNConfig
//  lexer_action_executor:            *LexerActionExecutor
//  passed_through_non_greedy_decision: bool
//}
//
//impl LexerATNConfig {§//  fn new6(&self, state ATNState, alt: i32, context: PredictionContext) -> *LexerATNConfig {
//  return &LexerATNConfig{BaseATNConfig: NewBaseATNConfig5(state, alt, context, SemanticContextNone)}
//}
//
//impl LexerATNConfig {§//  fn new5(&self, state ATNState, alt i32, context: PredictionContext, lexer_action_executor *LexerActionExecutor) -> *LexerATNConfig {
//  return &LexerATNConfig{
//    BaseATNConfig:       NewBaseATNConfig5(state, alt, context, SemanticContextNone),
//    lexer_action_executor: lexer_action_executor,
//  }
//}
//
//impl LexerATNConfig {§//  fn new4(&self, c *LexerATNConfig, state: ATNState) -> *LexerATNConfig {
//  return &LexerATNConfig{
//    BaseATNConfig:                  NewBaseATNConfig(c, state, self.context(), self.semantic_context()),
//    lexer_action_executor:            self.lexer_action_executor,
//    passed_through_non_greedy_decision: check_non_greedy_decision(c, state),
//  }
//}
//
//impl LexerATNConfig {§//  fn new3(&self, c *LexerATNConfig, state: ATNState, lexer_action_executor *LexerActionExecutor) -> *LexerATNConfig {
//  return &LexerATNConfig{
//    BaseATNConfig:                  NewBaseATNConfig(c, state, self.context(), self.semantic_context()),
//    lexer_action_executor:            lexer_action_executor,
//    passed_through_non_greedy_decision: check_non_greedy_decision(c, state),
//  }
//}
//
//impl LexerATNConfig {§//  fn new2(&self, c *LexerATNConfig, state: ATNState, context: PredictionContext) -> *LexerATNConfig {
//  return &LexerATNConfig{
//    BaseATNConfig:                  NewBaseATNConfig(c, state, context, self.semantic_context()),
//    lexer_action_executor:            self.lexer_action_executor,
//    passed_through_non_greedy_decision: check_non_greedy_decision(c, state),
//  }
//}
//
//impl LexerATNConfig {§//  fn new1(&self, state ATNState, alt: i32, context: PredictionContext) -> *LexerATNConfig {
//  return &LexerATNConfig{BaseATNConfig: NewBaseATNConfig5(state, alt, context, SemanticContextNone)}
//}
//
//pub fn hash(&self) -> &str {
//  var f &str
//
//  if self.passed_through_non_greedy_decision {
//    f = "1"
//  } else {
//    f = "0"
//  }
//
//  return fmt.sprintf("%v%v%v%v%v%v", self.state.state_number(), self.alt, self.context, self.semantic_context, f, self.lexer_action_executor)
//}
//
//fn equals(&self, other i32erface{}) -> bool {
//  var othert, ok = other.(*LexerATNConfig)
//
//  if l == other {
//    return true
//  } else if !ok {
//    return false
//  } else if self.passed_through_non_greedy_decision != othert.passed_through_non_greedy_decision {
//    return false
//  }
//
//  var b bool
//
//  if self.lexer_action_executor != nil {
//    b = !self.lexer_action_executor.equals(othert.lexer_action_executor)
//  } else {
//    b = othert.lexer_action_executor != nil
//  }
//
//  if b {
//    return false
//  }
//
//  return self.base_atn_config.equals(othert.base_atn_config)
//}
//
//fn check_non_greedy_decision(source *LexerATNConfig, target: ATNState) -> bool { // non-member
//  var ds, ok = target.(DecisionState)
//
//  return source.passed_through_non_greedy_decision || (ok && ds.non_greedy())
//}
