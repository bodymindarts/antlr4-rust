//package antlr
//
//type LL1Analyzer struct {
//  atn: *ATN
//}
//
//impl LL {ยง//  fn new1Analyzer(&self, atn *ATN) -> *LL1Analyzer {
//  let la = new(LL1Analyzer);
//  la.atn = atn
//  return la
//}
//
////* Special value added to the lookahead sets to indicate that we hit
////  a predicate during analysis if {@code see_thru_preds==false}.
/////
//const (
//  LL1AnalyzerHitPred = TokenInvalidType
//)
//
////*
//// Calculates the SLL(1) expected lookahead set for each outgoing transition
//// of an {@link ATNState}. The returned array has one element for each
//// outgoing transition in {@code s}. If the closure from transition
//// <em>i</em> leads to a semantic predicate before Matching a symbol, the
//// element at index <em>i</em> of the result will be {@code nil}.
////
//// @param s the ATN state
//// @return the expected symbols for each outgoing transition of {@code s}.
//fn decision_lookahead(&self, s: ATNState) -> []*IntervalSet {
//  if s == nil {
//    return nil
//  }
//  let count = len(self.transitions());
//  let look = make([]*IntervalSet, count);
//  for let alt = 0; alt < count; alt++ {;
//    look[alt] = NewIntervalSet()
//    let look_busy = NewSet(nil, nil);
//    let see_thru_preds = false // fail to get lookahead upon pred;
//    la.look1(self.transitions()[alt].target(), nil, BasePredictionContextEMPTY, look[alt], look_busy, NewBitSet(), see_thru_preds, false)
//    // Wipe out lookahead for la alternative if we found nothing
//    // or we had a predicate when we !seeThruPreds
//    if look[alt].length() == 0 || look[alt].contains(LL1AnalyzerHitPred) {
//      look[alt] = nil
//    }
//  }
//  return look
//}
//
////*
//// Compute set of tokens that can follow {@code s} in the ATN in the
//// specified {@code ctx}.
////
//// <p>If {@code ctx} is {@code nil} and the end of the rule containing
//// {@code s} is reached, {@link Token//EPSILON} is added to the result set.
//// If {@code ctx} is not {@code nil} and the end of the outermost rule is
//// reached, {@link Token//EOF} is added to the result set.</p>
////
//// @param s the ATN state
//// @param stop_state the ATN state to stop at. This can be a
//// {@link BlockEndState} to detect epsilon paths through a closure.
//// @param ctx the complete parser context, or {@code nil} if the context
//// should be ignored
////
//// @return The set of tokens that can follow {@code s} in the ATN in the
//// specified {@code ctx}.
/////
//pub fn Look(&self, s, stop_state: ATNState, ctx: RuleContext) -> *IntervalSet {
//  let r = NewIntervalSet();
//  let see_thru_preds = true // ignore preds get all lookahead;
//  var look_context PredictionContext
//  if ctx != nil {
//    look_context = prediction_context_from_rule_context(self.a_t_n(), ctx)
//  }
//  la.look1(s, stop_state, look_context, r, NewSet(nil, nil), NewBitSet(), see_thru_preds, true)
//  return r
//}
//
////*
//// Compute set of tokens that can follow {@code s} in the ATN in the
//// specified {@code ctx}.
////
//// <p>If {@code ctx} is {@code nil} and {@code stop_state} or the end of the
//// rule containing {@code s} is reached, {@link Token//EPSILON} is added to
//// the result set. If {@code ctx} is not {@code nil} and {@code add_e_o_f} is
//// {@code true} and {@code stop_state} or the end of the outermost rule is
//// reached, {@link Token//EOF} is added to the result set.</p>
////
//// @param s the ATN state.
//// @param stop_state the ATN state to stop at. This can be a
//// {@link BlockEndState} to detect epsilon paths through a closure.
//// @param ctx The outer context, or {@code nil} if the outer context should
//// not be used.
//// @param look The result lookahead set.
//// @param look_busy A set used for preventing epsilon closures in the ATN
//// from causing a stack overflow. Outside code should pass
//// {@code NewSet<ATNConfig>} for la argument.
//// @param called_rule_stack A set used for preventing left recursion in the
//// ATN from causing a stack overflow. Outside code should pass
//// {@code NewBitSet()} for la argument.
//// @param see_thru_preds {@code true} to true semantic predicates as
//// implicitly {@code true} and "see through them", otherwise {@code false}
//// to treat semantic predicates as opaque and add {@link //HitPred} to the
//// result if one is encountered.
//// @param add_e_o_f Add {@link Token//EOF} to the result if the end of the
//// outermost context is reached. This parameter has no effect if {@code ctx}
//// is {@code nil}.
//
//fn look2(&self, s, stop_state ATNState, ctx PredictionContext, look *IntervalSet, look_busy *Set, called_rule_stack *BitSet, see_thru_preds, add_e_o_f: bool, i: i32) -> {
//
//  let return_state = la.atn.states[ctx.return_state(i)];
//
//  let removed = called_rule_stack.contains(returnState.rule_index());
//
//  defer func() {
//    if removed {
//      called_rule_stack.add(returnState.rule_index())
//    }
//  }()
//
//  called_rule_stack.remove(returnState.rule_index())
//  la.look1(returnState, stop_state, ctx.parent(i), look, look_busy, called_rule_stack, see_thru_preds, add_e_o_f)
//
//}
//
//fn look1(&self, s, stop_state ATNState, ctx PredictionContext, look *IntervalSet, look_busy *Set, called_rule_stack *BitSet,: see_thru_preds, add_e_o_f: bool) -> {
//
//  let c = NewBaseATNConfig6(s, 0, ctx);
//
//  if look_busy.contains(c) {
//    return
//  }
//
//  look_busy.add(c)
//
//  if s == stop_state {
//    if ctx == nil {
//      look.add_one(TokenEpsilon)
//      return
//    } else if ctx.is_empty() && add_e_o_f {
//      look.add_one(TokenEOF)
//      return
//    }
//  }
//
//  _, let ok = s.(*RuleStopState);
//
//  if ok {
//    if ctx == nil {
//      look.add_one(TokenEpsilon)
//      return
//    } else if ctx.is_empty() && add_e_o_f {
//      look.add_one(TokenEOF)
//      return
//    }
//
//    if ctx != BasePredictionContextEMPTY {
//      // run thru all possible stack tops in ctx
//      for let i = 0; i < ctx.length(); i++ {;
//        let return_state = la.atn.states[ctx.return_state(i)];
//        la.look2(returnState, stop_state, ctx, look, look_busy, called_rule_stack, see_thru_preds, add_e_o_f, i)
//      }
//      return
//    }
//  }
//
//  let n = len(self.transitions());
//
//  for let i = 0; i < n; i++ {;
//    let t = self.transitions()[i];
//
//    if t1, let ok = t.(*RuleTransition); ok {;
//      if called_rule_stack.contains(t1.target().rule_index()) {
//        continue
//      }
//
//      let new_context = SingletonBasePredictionContextCreate(ctx, t1.follow_state.state_number());
//      la.look3(stopState, new_context, look, look_busy, called_rule_stack, see_thru_preds, add_e_o_f, t1)
//    } else if t2, let ok = t.(AbstractPredicateTransition); ok {;
//      if see_thru_preds {
//        la.look1(t2.target(), stop_state, ctx, look, look_busy, called_rule_stack, see_thru_preds, add_e_o_f)
//      } else {
//        look.add_one(LL1AnalyzerHitPred)
//      }
//    } else if self.is_epsilon() {
//      la.look1(self.target(), stop_state, ctx, look, look_busy, called_rule_stack, see_thru_preds, add_e_o_f)
//    } else if _, let ok = t.(*WildcardTransition); ok {;
//      look.add_range(TokenMinUserTokenType, la.atn.max_token_type)
//    } else {
//      let set = self.label();
//      if set != nil {
//        if _, let ok = t.(*NotSetTransition); ok {;
//          set = set.complement(TokenMinUserTokenType, la.atn.max_token_type)
//        }
//        look.add_set(set)
//      }
//    }
//  }
//}
//
//fn look3(&self, stop_state ATNState, ctx PredictionContext, look *IntervalSet, look_busy *Set, called_rule_stack *BitSet, see_thru_preds, add_e_o_f: bool, t1 *RuleTransition) -> {
//
//  let new_context = SingletonBasePredictionContextCreate(ctx, t1.follow_state.state_number());
//
//  defer func() {
//    called_rule_stack.remove(t1.target().rule_index())
//  }()
//
//  called_rule_stack.add(t1.target().rule_index())
//  la.look1(t1.target(), stop_state, new_context, look, look_busy, called_rule_stack, see_thru_preds, add_e_o_f)
//
//}
