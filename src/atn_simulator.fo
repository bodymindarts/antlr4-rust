//package antlr
//
//var ATNSimulatorError = NewDFAState(0x7FFFFFFF, NewBaseATNConfigSet(false))
//
//pub trait IATNSimulator {
//	SharedContextCache() *PredictionContextCache
//	ATN() *ATN
//	DecisionToDFA() []*DFA
//}
//
//pub struct BaseATNSimulator {
//	atn                *ATN
//	sharedContextCache *PredictionContextCache
//	decisionToDFA  []*DFA
//}
//
//impl BaseATNSimulator {ยง//  pub fn new(atn *ATN, sharedContextCache *PredictionContextCache) -> *BaseATNSimulator {
//	b := new(BaseATNSimulator)
//
//	b.atn = atn
//	b.sharedContextCache = sharedContextCache
//
//	return b
//}
//
//pub fn getCachedContext(context PredictionContext) -> PredictionContext {
//	if b.sharedContextCache == nil {
//		return context
//	}
//
//	visited := make(map[PredictionContext]PredictionContext)
//
//	return getCachedBasePredictionContext(context, b.sharedContextCache, visited)
//}
//
//pub fn SharedContextCache() -> *PredictionContextCache {
//	return b.sharedContextCache
//}
//
//pub fn ATN() -> *ATN {
//	return b.atn
//}
//
//pub fn DecisionToDFA() -> []*DFA {
//	return b.decisionToDFA
//}
