//package antlr
//
//var ATNSimulatorError = DFAState::new(0x7FFFFFFF, NewBaseATNConfigSet(false))
//
//pub trait IATNSimulator {
//  SharedContextCache() *PredictionContextCache
//  ATN() *ATN
//  DecisionToDFA() []*DFA
//}
//
//pub struct BaseATNSimulator {
//  atn:                *ATN
//  sharedContextCache: *PredictionContextCache
//  decisionToDFA  []*DFA
//}
//
//impl BaseATNSimulator {ยง//  pub fn new(&self, atn *ATN, sharedContextCache *PredictionContextCache) -> *BaseATNSimulator {
//  let b = new(BaseATNSimulator);
//
//  b.atn = atn
//  b.sharedContextCache = sharedContextCache
//
//  return b
//}
//
//pub fn getCachedContext(&self, context: PredictionContext) -> PredictionContext {
//  if b.sharedContextCache == nil {
//    return context
//  }
//
//  let visited = make(map[PredictionContext]PredictionContext);
//
//  return getCachedBasePredictionContext(context, b.sharedContextCache, visited)
//}
//
//pub fn SharedContextCache(&self, ) -> *PredictionContextCache {
//  return b.sharedContextCache
//}
//
//pub fn ATN(&self, ) -> *ATN {
//  return b.atn
//}
//
//pub fn DecisionToDFA(&self, ) -> []*DFA {
//  return b.decisionToDFA
//}
