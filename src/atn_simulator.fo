//package antlr
//
//var ATNSimulatorError = DFAState::new(0x7FFFFFFF, NewBaseATNConfigSet(false))
//
//pub trait IATNSimulator {
//  SharedContextCache() *PredictionContextCache
//  ATN() *ATN
//  DecisionToDFA() []*DFA
//}
//
//pub struct BaseATNSimulator {
//  atn:                *ATN
//  shared_context_cache: *PredictionContextCache
//  decision_to_d_f_a  []*DFA
//}
//
//impl BaseATNSimulator {ยง//  fn new(&self, atn *ATN, shared_context_cache *PredictionContextCache) -> *BaseATNSimulator {
//  let b = new(BaseATNSimulator);
//
//  self.atn = atn
//  self.shared_context_cache = shared_context_cache
//
//  return b
//}
//
//fn get_cached_context(&self, context: PredictionContext) -> PredictionContext {
//  if self.shared_context_cache == nil {
//    return context
//  }
//
//  let visited = make(map[PredictionContext]PredictionContext);
//
//  return get_cached_base_prediction_context(context, self.shared_context_cache, visited)
//}
//
//pub fn SharedContextCache(&self, ) -> *PredictionContextCache {
//  return self.shared_context_cache
//}
//
//pub fn ATN(&self, ) -> *ATN {
//  return self.atn
//}
//
//pub fn DecisionToDFA(&self, ) -> []*DFA {
//  return self.decision_to_d_f_a
//}
