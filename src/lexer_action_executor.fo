//package antlr
//
//// Represents an executor for a sequence of lexer actions which traversed during
//// the Matching operation of a lexer rule (token).
////
//// <p>The executor tracks position information for position-dependent lexer actions
//// efficiently, ensuring that actions appearing only at the end of the rule do
//// not cause bloating of the {@link DFA} created for the lexer.</p>
//
//pub struct LexerActionExecutor {
//  lexer_actions     []LexerAction
//  cached_hash_string: &str
//}
//
//impl LexerActionExecutor {ยง//  pub fn new(&self, lexer_actions []LexerAction) -> *LexerActionExecutor {
//
//  if lexer_actions == nil {
//    lexer_actions = make([]LexerAction, 0)
//  }
//
//  let l = new(LexerActionExecutor);
//
//  l.lexer_actions = lexer_actions
//
//  // Caches the result of {@link //hashCode} since the hash code is an element
//  // of the performance-critical {@link LexerATNConfig//hashCode} operation.
//
//  var s &str
//  for _, let a = range lexer_actions {;
//    s += a.Hash()
//  }
//
//  l.cached_hash_string = s // "".join([str(la) for la in
//
//  return l
//}
//
//// Creates a {@link LexerActionExecutor} which executes the actions for
//// the input {@code lexer_action_executor} followed by a specified
//// {@code lexer_action}.
////
//// @param lexer_action_executor The executor for actions already traversed by
//// the lexer while Matching a token within a particular
//// {@link LexerATNConfig}. If this is {@code nil}, the method behaves as
//// though it were an empty executor.
//// @param lexer_action The lexer action to execute after the actions
//// specified in {@code lexer_action_executor}.
////
//// @return A {@link LexerActionExecutor} for executing the combine actions
//// of {@code lexer_action_executor} and {@code lexer_action}.
//pub fn LexerActionExecutorappend(lexerActionExecutor *LexerActionExecutor, lexer_action: LexerAction) -> *LexerActionExecutor { // non-member
//  if lexer_action_executor == nil {
//    return NewLexerActionExecutor([]LexerAction{lexerAction})
//  }
//
//  let lexer_actions = append(lexerActionExecutor.lexer_actions, lexer_action);
//
//  //  let lexer_actions = lexer_action_executor.lexer_actions.concat([ lexer_action ]);
//  return NewLexerActionExecutor(lexerActions)
//}
//
//// Creates a {@link LexerActionExecutor} which encodes the current offset
//// for position-dependent lexer actions.
////
//// <p>Normally, when the executor encounters lexer actions where
//// {@link LexerAction//isPositionDependent} returns {@code true}, it calls
//// {@link IntStream//seek} on the input {@link CharStream} to set the input
//// position to the <em>end</em> of the current token. This behavior provides
//// for efficient DFA representation of lexer actions which appear at the end
//// of a lexer rule, even when the lexer rule Matches a variable number of
//// characters.</p>
////
//// <p>Prior to traversing a Match transition in the ATN, the current offset
//// from the token start index is assigned to all position-dependent lexer
//// actions which have not already been assigned a fixed offset. By storing
//// the offsets relative to the token start index, the DFA representation of
//// lexer actions which appear in the middle of tokens remains efficient due
//// to sharing among tokens of the same length, regardless of their absolute
//// position in the input stream.</p>
////
//// <p>If the current executor already has offsets assigned to all
//// position-dependent lexer actions, the method returns {@code this}.</p>
////
//// @param offset The current offset to assign to all position-dependent
//// lexer actions which do not already have offsets assigned.
////
//// @return A {@link LexerActionExecutor} which stores input stream offsets
//// for all position-dependent lexer actions.
//// /
//pub fn fix_offset_before_match(&self, offset: i32) -> *LexerActionExecutor {
//  var updated_lexer_actions []LexerAction
//  for let i = 0; i < len(l.lexer_actions); i++ {;
//    _, let ok = l.lexer_actions[i].(*LexerIndexedCustomAction);
//    if l.lexer_actions[i].get_is_position_dependent() && !ok {
//      if updated_lexer_actions == nil {
//        updated_lexer_actions = make([]LexerAction, 0)
//
//        for _, let a = range l.lexer_actions {;
//          updated_lexer_actions = append(updatedLexerActions, a)
//        }
//      }
//
//      updated_lexer_actions[i] = NewLexerIndexedCustomAction(offset, l.lexer_actions[i])
//    }
//  }
//  if updated_lexer_actions == nil {
//    return l
//  }
//
//  return NewLexerActionExecutor(updatedLexerActions)
//}
//
//// Execute the actions encapsulated by l executor within the context of a
//// particular {@link Lexer}.
////
//// <p>This method calls {@link IntStream//seek} to set the position of the
//// {@code input} {@link CharStream} prior to calling
//// {@link LexerAction//execute} on a position-dependent action. Before the
//// method returns, the input position will be restored to the same position
//// it was in when the method was invoked.</p>
////
//// @param lexer The lexer instance.
//// @param input The input stream which is the source for the current token.
//// When l method is called, the current {@link IntStream//index} for
//// {@code input} should be the start of the following token, i.e. 1
//// character past the end of the current token.
//// @param start_index The token start index. This value may be passed to
//// {@link IntStream//seek} to set the {@code input} position to the beginning
//// of the token.
//// /
//pub fn execute(&self, lexer Lexer, input: CharStream, start_index: i32) {
//  let requires_seek = false;
//  let stop_index = input.Index();
//
//  defer func() {
//    if requires_seek {
//      input.Seek(stopIndex)
//    }
//  }()
//
//  for let i = 0; i < len(l.lexer_actions); i++ {;
//    let lexer_action = l.lexer_actions[i];
//    if la, let ok = lexer_action.(*LexerIndexedCustomAction); ok {;
//      let offset = la.offset;
//      input.Seek(startIndex + offset)
//      lexer_action = la.lexer_action
//      requires_seek = (startIndex + offset) != stop_index
//    } else if lexer_action.get_is_position_dependent() {
//      input.Seek(stopIndex)
//      requires_seek = false
//    }
//    lexer_action.execute(lexer)
//  }
//}
//
//pub fn Hash(&self, ) -> &str {
//  return l.cached_hash_string
//}
//
//pub fn equals(&self, other i32erface{}) -> bool {
//  if l == other {
//    return true
//  } else if _, let ok = other.(*LexerActionExecutor); !ok {;
//    return false
//  } else {
//    return l.cached_hash_string == other.(*LexerActionExecutor).cached_hash_string &&
//      &l.lexer_actions == &other.(*LexerActionExecutor).lexer_actions
//  }
//}
