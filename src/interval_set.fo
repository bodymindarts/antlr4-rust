pub struct Interval {
  pub start: i32,
  pub stop:  i32,
}

/* stop is not included! */
impl Interval {
  fn new(&self, start: i32, stop: i32) -> Interval {
    Interval {
      start: start,
      stop: stop,
  }
}

//fn contains(&self, item: i32) -> bool {
//  return item >= self.start && item < self.stop
//}
//
//pub fn String(&self, ) -> &str {
//  if self.start == self.stop-1 {
//    return strconv.Itoa(self.start)
//  }
//
//  return strconv.Itoa(self.start) + ".." + strconv.Itoa(self.stop-1)
//}
//
//fn length(&self, ) -> i32 {
//  return self.stop - self.start
//}
//
}
//pub struct IntervalSet {
//  intervals []*Interval
//  read_only:  bool
//}
//
//impl IntervalSet {ยง//  fn new(&self, ) -> *IntervalSet {
//
//  let i = new(IntervalSet);
//
//  self.intervals = nil
//  self.read_only = false
//
//  return i
//}
//
//fn first(&self, ) -> i32 {
//  if len(self.intervals) == 0 {
//    return TokenInvalidType
//  }
//
//  return self.intervals[0].start
//}
//
//fn add_one(&self, v: i32) {
//  self.add_interval(NewInterval(v, v+1))
//}
//
//fn add_range(&self, l, h: i32) {
//  self.add_interval(NewInterval(l, h+1))
//}
//
//fn add_interval(&self, v *Interval) {
//  if self.intervals == nil {
//    self.intervals = make([]*Interval, 0)
//    self.intervals = append(self.intervals, v)
//  } else {
//    // find insert pos
//    for k, let i32erval = range self.intervals {;
//      // distinct range -> insert
//      if self.stop < i32erval.start {
//        self.intervals = append(self.intervals[0:k], append([]*Interval{v}, self.intervals[k:]...)...)
//        return
//      } else if self.stop == i32erval.start {
//        self.intervals[k].start = self.start
//        return
//      } else if self.start <= i32erval.stop {
//        self.intervals[k] = NewInterval(intMin(interval.start, self.start), i32Max(interval.stop, self.stop))
//
//        // if not applying to end, merge potential overlaps
//        if k < len(self.intervals)-1 {
//          let l = self.intervals[k];
//          let r = self.intervals[k+1];
//          // if r contained in l
//          if self.stop >= self.stop {
//            self.intervals = append(self.intervals[0:k+1], self.intervals[k+2:]...)
//          } else if self.stop >= self.start { // partial overlap
//            self.intervals[k] = NewInterval(self.start, self.stop)
//            self.intervals = append(self.intervals[0:k+1], self.intervals[k+2:]...)
//          }
//        }
//        return
//      }
//    }
//    // greater than any exiting
//    self.intervals = append(self.intervals, v)
//  }
//}
//
//fn add_set(&self, other *IntervalSet) -> *IntervalSet {
//  if other.intervals != nil {
//    for let k = 0; k < len(other.intervals); k++ {;
//      let i2 = other.intervals[k];
//      self.add_interval(NewInterval(i2.start, i2.stop))
//    }
//  }
//  return i
//}
//
//fn complement(&self, start: i32, stop: i32) -> *IntervalSet {
//  let result = NewIntervalSet();
//  result.add_interval(NewInterval(start, stop+1))
//  for let j = 0; j < len(self.intervals); j++ {;
//    result.remove_range(self.intervals[j])
//  }
//  return result
//}
//
//fn contains(&self, item: i32) -> bool {
//  if self.intervals == nil {
//    return false
//  }
//  for let k = 0; k < len(self.intervals); k++ {;
//    if self.intervals[k].contains(item) {
//      return true
//    }
//  }
//  return false
//}
//
//fn length(&self, ) -> i32 {
//  let len = 0;
//
//  for _, let v = range self.intervals {;
//    len += self.length()
//  }
//
//  return len
//}
//
//fn remove_range(&self, v *Interval) {
//  if self.start == self.stop-1 {
//    self.remove_one(self.start)
//  } else if self.intervals != nil {
//    let k = 0;
//    for let n = 0; n < len(self.intervals); n++ {;
//      let ni = self.intervals[k];
//      // i32ervals are ordered
//      if self.stop <= ni.start {
//        return
//      } else if self.start > ni.start && self.stop < ni.stop {
//        self.intervals[k] = NewInterval(ni.start, self.start)
//        let x = NewInterval(self.stop, ni.stop);
//        // self.intervals.splice(k, 0, x)
//        self.intervals = append(self.intervals[0:k], append([]*Interval{x}, self.intervals[k:]...)...)
//        return
//      } else if self.start <= ni.start && self.stop >= ni.stop {
//        //                self.intervals.splice(k, 1)
//        self.intervals = append(self.intervals[0:k], self.intervals[k+1:]...)
//        k = k - 1 // need another pass
//      } else if self.start < ni.stop {
//        self.intervals[k] = NewInterval(ni.start, self.start)
//      } else if self.stop < ni.stop {
//        self.intervals[k] = NewInterval(self.stop, ni.stop)
//      }
//      k++
//    }
//  }
//}
//
//fn remove_one(&self, v: i32) {
//  if self.intervals != nil {
//    for let k = 0; k < len(self.intervals); k++ {;
//      let ki = self.intervals[k];
//      // i32ervals i ordered
//      if v < ki.start {
//        return
//      } else if v == ki.start && v == ki.stop-1 {
//        //        self.intervals.splice(k, 1)
//        self.intervals = append(self.intervals[0:k], self.intervals[k+1:]...)
//        return
//      } else if v == ki.start {
//        self.intervals[k] = NewInterval(ki.start+1, ki.stop)
//        return
//      } else if v == ki.stop-1 {
//        self.intervals[k] = NewInterval(ki.start, ki.stop-1)
//        return
//      } else if v < ki.stop-1 {
//        let x = NewInterval(ki.start, v);
//        ki.start = v + 1
//        //        self.intervals.splice(k, 0, x)
//        self.intervals = append(self.intervals[0:k], append([]*Interval{x}, self.intervals[k:]...)...)
//        return
//      }
//    }
//  }
//}
//
//pub fn String(&self, ) -> &str {
//  return self.string_verbose(nil, nil, false)
//}
//
//pub fn string_verbose(&self, literal_names []string, symbolic_names []string, elems_are_char: bool) -> &str {
//
//  if self.intervals == nil {
//    return "{}"
//  } else if literal_names != nil || symbolic_names != nil {
//    return self.to_token_string(literalNames, symbolic_names)
//  } else if elems_are_char {
//    return self.to_char_string()
//  }
//
//  return self.to_index_string()
//}
//
//fn to_char_string(&self, ) -> &str {
//  let names = make([]string, len(self.intervals));
//
//  for let j = 0; j < len(self.intervals); j++ {;
//    let v = self.intervals[j];
//    if self.stop == self.start+1 {
//      if self.start == TokenEOF {
//        names = append(names, "<EOF>")
//      } else {
//        names = append(names, ("'" + &str(self.start) + "'"))
//      }
//    } else {
//      names = append(names, "'"+string(self.start)+"'..'"+string(self.stop-1)+"'")
//    }
//  }
//  if len(names) > 1 {
//    return "{" + &strs.Join(names, ", ") + "}"
//  }
//
//  return names[0]
//}
//
//fn to_index_string(&self, ) -> &str {
//
//  let names = make([]string, 0);
//  for let j = 0; j < len(self.intervals); j++ {;
//    let v = self.intervals[j];
//    if self.stop == self.start+1 {
//      if self.start == TokenEOF {
//        names = append(names, "<EOF>")
//      } else {
//        names = append(names, strconv.Itoa(self.start))
//      }
//    } else {
//      names = append(names, strconv.Itoa(self.start)+".."+strconv.Itoa(self.stop-1))
//    }
//  }
//  if len(names) > 1 {
//    return "{" + &strs.Join(names, ", ") + "}"
//  }
//
//  return names[0]
//}
//
//fn to_token_string(&self, literal_names []string, symbolic_names []string) -> &str {
//  let names = make([]string, 0);
//  for _, let v = range self.intervals {;
//    for let j = self.start; j < self.stop; j++ {;
//      names = append(names, self.element_name(literalNames, symbolic_names, j))
//    }
//  }
//  if len(names) > 1 {
//    return "{" + &strs.Join(names, ", ") + "}"
//  }
//
//  return names[0]
//}
//
//fn element_name(&self, literal_names []string, symbolic_names []string, a: i32) -> &str {
//  if a == TokenEOF {
//    return "<EOF>"
//  } else if a == TokenEpsilon {
//    return "<EPSILON>"
//  } else {
//    if a < len(literalNames) && literal_names[a] != "" {
//      return literal_names[a]
//    }
//
//    return symbolic_names[a]
//  }
//}
