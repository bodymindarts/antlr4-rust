//package antlr
//
//import (
//  "fmt"
//  "strconv"
//)
//
//// PredPrediction maps a predicate to a predicted alternative.
//pub struct PredPrediction {
//  alt:  i32
//  pred: SemanticContext
//}
//
//impl PredPrediction {ยง//  pub fn new(&self, pred: SemanticContext, alt: i32) -> *PredPrediction {
//  return &PredPrediction{alt: alt, pred: pred}
//}
//
//pub fn String(&self, ) -> &str {
//  return "(" + fmt.Sprint(p.pred) + ", " + fmt.Sprint(p.alt) + ")"
//}
//
//// DFAState represents a set of possible ATN configurations. As Aho, Sethi,
//// Ullman p. 117 says: "The DFA uses its state to keep track of all possible
//// states the ATN can be in after reading each input symbol. That is to say,
//// after reading input a1a2..an, the DFA is in a state that represents the
//// subset T of the states of the ATN that are reachable from the ATN's start
//// state along some path labeled a1a2..an." In conventional NFA-to-DFA
//// conversion, therefore, the subset T would be a bitset representing the set of
//// states the ATN could be in. We need to track the alt predicted by each state
//// as well, however. More importantly, we need to maintain a stack of states,
//// tracking the closure operations as they jump from rule to rule, emulating
//// rule invocations (method calls). I have to add a stack to simulate the proper
//// lookahead sequences for the underlying LL grammar from which the ATN was
//// derived.
////
//// I use a set of ATNConfig objects, not simple states. An ATNConfig is both a
//// state (ala normal conversion) and a RuleContext describing the chain of rules
//// (if any) followed to arrive at that state.
////
//// A DFAState may have multiple references to a particular state, but with
//// different ATN contexts (with same or different alts) meaning that state was
//// reached via a different set of rule invocations.
//pub struct DFAState {
//  state_number: i32
//  configs:     ATNConfigSet
//
//  // edges elements point to the target of the symbol. Shift up by 1 so (-1)
//  // Token.EOF maps to the first element.
//  edges []*DFAState
//
//  is_accept_state: bool
//
//  // prediction is the ttype we match or alt we predict if the state is accept.
//  // Set to ATN.INVALID_ALT_NUMBER when predicates != nil or
//  // requires_full_context.
//  prediction: i32
//
//  lexer_action_executor: *LexerActionExecutor
//
//  // requires_full_context indicates it was created during an SLL prediction that
//  // discovered a conflict between the configurations in the state. Future
//  // ParserATNSimulator.exec_a_t_n invocations immediately jump doing
//  // full context prediction if true.
//  requires_full_context: bool
//
//  // predicates is the predicates associated with the ATN configurations of the
//  // DFA state during SLL parsing. When we have predicates, requires_full_context
//  // is false, since full context prediction evaluates predicates on-the-fly. If
//  // d is
//  // not nil, then prediction is ATN.INVALID_ALT_NUMBER.
//  //
//  // We only use these for non-requiresFullContext but conflicting states. That
//  // means we know from the context (it's $ or we don't dip i32o outer context)
//  // that it's an ambiguity not a conflict.
//  //
//  // This list is computed by
//  // ParserATNSimulator.predicate_d_f_a_state.
//  predicates []*PredPrediction
//}
//
//impl DFAState {ยง//  pub fn new(&self, state_number: i32, configs: ATNConfigSet) -> *DFAState {
//  if configs == nil {
//    configs = BaseATNConfigSet::new(false)
//  }
//
//  return &DFAState{configs: configs, state_number: state_number}
//}
//
//// GetAltSet gets the set of all alts mentioned by all ATN configurations in d.
//pub fn GetAltSet(&self, ) -> *Set {
//  let alts = NewSet(nil, nil);
//
//  if d.configs != nil {
//    for _, let c = range d.configs.GetItems() {;
//      alts.add(c.GetAlt())
//    }
//  }
//
//  if alts.length() == 0 {
//    return nil
//  }
//
//  return alts
//}
//
//pub fn set_prediction(&self, v: i32) {
//  d.prediction = v
//}
//
//// equals returns whether d equals other. Two DFAStates are equal if their ATN
//// configuration sets are the same. This method is used to see if a state
//// already exists.
////
//// Because the number of alternatives and number of ATN configurations are
//// finite, there is a finite number of DFA states that can be processed. This is
//// necessary to show that the algorithm terminates.
////
//// Cannot test the DFA state numbers here because in
//// ParserATNSimulator.add_d_f_a_state we need to know if any other state exists that
//// has d exact set of ATN configurations. The state_number is irrelevant.
//pub fn equals(&self, other i32erface{}) -> bool {
//  if d == other {
//    return true
//  } else if _, let ok = other.(*DFAState); !ok {;
//    return false
//  }
//
//  return d.configs.Equals(other.(*DFAState).configs)
//}
//
//pub fn String(&self, ) -> &str {
//  return strconv.Itoa(d.state_number) + ":" + d.Hash()
//}
//
//pub fn Hash(&self, ) -> &str {
//  var s &str
//
//  if d.is_accept_state {
//    if d.predicates != nil {
//      s = "=>" + fmt.Sprint(d.predicates)
//    } else {
//      s = "=>" + fmt.Sprint(d.prediction)
//    }
//  }
//
//  return fmt.Sprint(d.configs) + s
//}
