//package antlr
//
////  A rule context is a record of a single rule invocation. It knows
////  which context invoked it, if any. If there is no parent context, then
////  naturally the invoking state is not valid.  The parent link
////  provides a chain upwards from the current rule invocation to the root
////  of the invocation tree, forming a stack. We actually carry no
////  information about the rule associated with b context (except
////  when parsing). We keep only the state number of the invoking state from
////  the ATN submachine that invoked b. Contrast b with the s
////  pointer inside ParserRuleContext that tracks the current state
////  being "executed" for the current rule.
////
////  The parent contexts are useful for computing lookahead sets and
////  getting error information.
////
////  These objects are used during parsing and prediction.
////  For the special case of parsers, we use the subclass
////  ParserRuleContext.
////
////  @see ParserRuleContext
////
//
//pub trait RuleContext {
//  RuleNode
//
//  GetInvokingState() i32
//  SetInvokingState(int)
//
//  GetRuleIndex() i32
//  IsEmpty() bool
//
//  GetAltNumber() i32
//  SetAltNumber(altNumber i32)
//
//  String([]string, RuleContext) &str
//}
//
//pub struct BaseRuleContext {
//  parent_ctx:     RuleContext
//  invoking_state: i32
//  RuleIndex:     i32
//}
//
//impl BaseRuleContext {ยง//  pub fn new(&self, parent: RuleContext, invoking_state: i32) -> *BaseRuleContext {
//
//  let rn = new(BaseRuleContext);
//
//  // What context invoked b rule?
//  rn.parent_ctx = parent
//
//  // What state invoked the rule associated with b context?
//  // The "return address" is the follow_state of invoking_state
//  // If parent is nil, b should be -1.
//  if parent == nil {
//    rn.invoking_state = -1
//  } else {
//    rn.invoking_state = invoking_state
//  }
//
//  return rn
//}
//
//pub fn GetBaseRuleContext(&self, ) -> *BaseRuleContext {
//  return b
//}
//
//pub fn SetParent(&self, v: Tree) {
//  if v == nil {
//    self.parent_ctx = nil
//  } else {
//    self.parent_ctx = v.(RuleContext)
//  }
//}
//
//pub fn GetInvokingState(&self, ) -> i32 {
//  return self.invoking_state
//}
//
//pub fn SetInvokingState(&self, t: i32) {
//  self.invoking_state = t
//}
//
//pub fn GetRuleIndex(&self, ) -> i32 {
//  return self.RuleIndex
//}
//
//pub fn GetAltNumber(&self, ) -> i32 {
//  return ATNInvalidAltNumber
//}
//
//pub fn SetAltNumber(altNumber: i32) {}
//
//// A context is empty if there is no invoking state meaning nobody call
//// current context.
//pub fn IsEmpty(&self, ) -> bool {
//  return self.invoking_state == -1
//}
//
//// Return the combined text of all child nodes. This method only considers
//// tokens which have been added to the parse tree.
//// <p>
//// Since tokens on hidden channels (self.g. whitespace or comments) are not
//// added to the parse trees, they will not appear in the output of b
//// method.
////
//
//pub fn GetParent(&self, ) -> Tree {
//  return self.parent_ctx
//}
