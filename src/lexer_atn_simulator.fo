//package antlr
//
//import (
//  "fmt"
//  "strconv"
//)
//
//var (
//  LexerATNSimulatorDebug = false
//  LexerATNSimulatorDFADebug = false
//
//  LexerATNSimulatorMinDFAEdge = 0
//  LexerATNSimulatorMaxDFAEdge = 127 // forces unicode to stay in ATN
//
//  LexerATNSimulatorMatchCalls = 0
//)
//
//pub trait ILexerATNSimulator {
//  IATNSimulator
//
//  reset()
//  Match(input CharStream, mode i32) i32
//  GetCharPositionInLine() i32
//  GetLine() i32
//  GetText(input CharStream) &str
//  Consume(input CharStream)
//}
//
//pub struct LexerATNSimulator {
//  *BaseATNSimulator
//
//  recog:              Lexer
//  prediction_mode:     i32
//  merge_cache:         DoubleDict
//  start_index:         i32
//  Line:               i32
//  CharPositionInLine: i32
//  mode:               i32
//  prev_accept:         *SimState
//  MatchCalls:         i32
//}
//
//impl LexerATNSimulator {ยง//  fn new(&self, recog: Lexer, atn *ATN, decision_to_d_f_a []*DFA, shared_context_cache *PredictionContextCache) -> *LexerATNSimulator {
//  let l = new(LexerATNSimulator);
//
//  self.BaseATNSimulator = NewBaseATNSimulator(atn, shared_context_cache)
//
//  self.decision_to_d_f_a = decision_to_d_f_a
//  self.recog = recog
//  // The current token's starting index i32o the character stream.
//  // Shared across DFA to ATN simulation in case the ATN fails and the
//  // DFA did not have a previous accept state. In l case, we use the
//  // ATN-generated exception object.
//  self.start_index = -1
//  // line number 1..n within the input///
//  self.Line = 1
//  // The index of the character relative to the beginning of the line
//  // 0..n-1///
//  self.CharPositionInLine = 0
//  self.mode = LexerDefaultMode
//  // Used during DFA/ATN exec to record the most recent accept configuration
//  // info
//  self.prev_accept = NewSimState()
//  // done
//  return l
//}
//
//fn copy_state(&self, simulator *LexerATNSimulator) {
//  self.CharPositionInLine = simulator.CharPositionInLine
//  self.Line = simulator.Line
//  self.mode = simulator.mode
//  self.start_index = simulator.start_index
//}
//
//pub fn Match(&self, input: CharStream, mode: i32) -> i32 {
//  self.MatchCalls++
//  self.mode = mode
//  let mark = input.Mark();
//
//  defer func() {
//    input.Release(mark)
//  }()
//
//  self.start_index = input.Index()
//  self.prev_accept.reset()
//
//  let dfa = self.decision_to_d_f_a[mode];
//
//  if dfa.s0 == nil {
//    return self.MatchATN(input)
//  }
//
//  return self.exec_a_t_n(input, dfa.s0)
//}
//
//fn reset(&self, ) {
//  self.prev_accept.reset()
//  self.start_index = -1
//  self.Line = 1
//  self.CharPositionInLine = 0
//  self.mode = LexerDefaultMode
//}
//
//pub fn MatchATN(&self, input: CharStream) -> i32 {
//  let start_state = self.atn.mode_to_start_state[self.mode];
//
//  if LexerATNSimulatorDebug {
//    fmt.Println("MatchATN mode " + strconv.Itoa(self.mode) + " start: " + start_state.String())
//  }
//  let old_mode = self.mode;
//  let s0Closure = self.compute_start_state(input, start_state);
//  let suppress_edge = s0Closure.has_semantic_context;
//  s0Closure.has_semantic_context = false
//
//  let next = self.add_d_f_a_state(s0Closure);
//
//  if !suppressEdge {
//    self.decision_to_d_f_a[self.mode].s0 = next
//  }
//
//  let predict = self.exec_a_t_n(input, next);
//
//  if LexerATNSimulatorDebug {
//    fmt.Println("DFA after MatchATN: " + self.decision_to_d_f_a[oldMode].ToLexerString())
//  }
//  return predict
//}
//
//fn exec_a_t_n(&self, input: CharStream, ds0 *DFAState) -> i32 {
//
//  if LexerATNSimulatorDebug {
//    fmt.Println("start state closure=" + ds0.configs.String())
//  }
//  if ds0.is_accept_state {
//    // allow zero-length tokens
//    self.capture_sim_state(self.prev_accept, input, ds0)
//  }
//  let t = input.LA(1);
//  let s = ds0 // s is current/from DFA state;
//
//  for { // while more work
//    if LexerATNSimulatorDebug {
//      fmt.Println("execATN loop starting closure: " + self.configs.String())
//    }
//
//    // As we move src->trg, src->trg, we keep track of the previous trg to
//    // avoid looking up the DFA state again, which is expensive.
//    // If the previous target was already part of the DFA, we might
//    // be able to avoid doing a reach operation upon t. If s!=nil,
//    // it means that semantic predicates didn't prevent us from
//    // creating a DFA state. Once we know s!=nil, we check to see if
//    // the DFA state has an edge already for t. If so, we can just reuse
//    // it's configuration set there's no point in re-computing it.
//    // This is kind of like doing DFA simulation within the ATN
//    // simulation because DFA simulation is really just a way to avoid
//    // computing reach/closure sets. Technically, once we know that
//    // we have a previously added DFA state, we could jump over to
//    // the DFA simulator. But, that would mean popping back and forth
//    // a lot and making things more complicated algorithmically.
//    // This optimization makes a lot of sense for loops within DFA.
//    // A character will take us back to an existing DFA state
//    // that already has lots of edges out of it. self.g., .* in comments.
//    let target = self.get_existing_target_state(s, t);
//    if target == nil {
//      target = self.compute_target_state(input, s, t)
//      // print("Computed:" + str(target))
//    }
//    if target == ATNSimulatorError {
//      break
//    }
//    // If l is a consumable input element, make sure to consume before
//    // capturing the accept state so the input index, line, and char
//    // position accurately reflect the state of the i32erpreter at the
//    // end of the token.
//    if t != TokenEOF {
//      self.Consume(input)
//    }
//    if target.is_accept_state {
//      self.capture_sim_state(self.prev_accept, input, target)
//      if t == TokenEOF {
//        break
//      }
//    }
//    t = input.LA(1)
//    s = target // flip current DFA target becomes Newsrc/from state
//  }
//
//  return self.fail_or_accept(self.prev_accept, input, self.configs, t)
//}
//
//// Get an existing target state for an edge in the DFA. If the target state
//// for the edge has not yet been computed or is otherwise not available,
//// l method returns {@code nil}.
////
//// @param s The current DFA state
//// @param t The next input symbol
//// @return The existing target DFA state for the given input symbol
//// {@code t}, or {@code nil} if the target state for l edge is not
//// already cached
//fn get_existing_target_state(&self, s *DFAState, t: i32) -> *DFAState {
//  if self.edges == nil || t < LexerATNSimulatorMinDFAEdge || t > LexerATNSimulatorMaxDFAEdge {
//    return nil
//  }
//
//  let target = self.edges[t-LexerATNSimulatorMinDFAEdge];
//  if LexerATNSimulatorDebug && target != nil {
//    fmt.Println("reuse state " + strconv.Itoa(self.state_number) + " edge to " + strconv.Itoa(target.state_number))
//  }
//  return target
//}
//
//// Compute a target state for an edge in the DFA, and attempt to add the
//// computed state and corresponding edge to the DFA.
////
//// @param input The input stream
//// @param s The current DFA state
//// @param t The next input symbol
////
//// @return The computed target DFA state for the given input symbol
//// {@code t}. If {@code t} does not lead to a valid DFA state, l method
//// returns {@link //ERROR}.
//fn compute_target_state(&self, input: CharStream, s *DFAState, t: i32) -> *DFAState {
//  let reach = NewOrderedATNConfigSet();
//
//  // if we don't find an existing DFA state
//  // Fill reach starting from closure, following t transitions
//  self.get_reachable_config_set(input, self.configs, reach.BaseATNConfigSet, t)
//
//  if len(reach.configs) == 0 { // we got nowhere on t from s
//    if !reach.has_semantic_context {
//      // we got nowhere on t, don't panic out l knowledge it'd
//      // cause a failover from DFA later.
//      self.add_d_f_a_edge(s, t, ATNSimulatorError, nil)
//    }
//    // stop when we can't Match any more char
//    return ATNSimulatorError
//  }
//  // Add an edge from s to target DFA found/created for reach
//  return self.add_d_f_a_edge(s, t, nil, reach.BaseATNConfigSet)
//}
//
//fn fail_or_accept(&self, prev_accept *SimState, input CharStream, reach: ATNConfigSet, t: i32) -> i32 {
//  if self.prev_accept.dfa_state != nil {
//    let lexer_action_executor = prev_accept.dfa_state.lexer_action_executor;
//    self.accept(input, lexer_action_executor, self.start_index, prev_accept.index, prev_accept.line, prev_accept.column)
//    return prev_accept.dfa_state.prediction
//  }
//
//  // if no accept and EOF is first char, return EOF
//  if t == TokenEOF && input.Index() == self.start_index {
//    return TokenEOF
//  }
//
//  panic(NewLexerNoViableAltException(self.recog, input, self.start_index, reach))
//}
//
//// Given a starting configuration set, figure out all ATN configurations
//// we can reach upon input {@code t}. Parameter {@code reach} is a return
//// parameter.
//fn get_reachable_config_set(&self, input CharStream, closure ATNConfigSet, reach: ATNConfigSet, t: i32) {
//  // l is used to Skip processing for configs which have a lower priority
//  // than a config that already reached an accept state for the same rule
//  let SkipAlt = ATNInvalidAltNumber;
//
//  for _, let cfg = range closure.GetItems() {;
//    let current_alt_reached_accept_state = (cfg.GetAlt() == SkipAlt);
//    if current_alt_reached_accept_state && cfg.(*LexerATNConfig).passed_through_non_greedy_decision {
//      continue
//    }
//
//    if LexerATNSimulatorDebug {
//
//      fmt.Printf("testing %s at %s\n", self.GetTokenName(t), cfg.String()) // self.recog, true))
//    }
//
//    for _, let trans = range cfg.GetState().GetTransitions() {;
//      let target = self.get_reachable_target(trans, t);
//      if target != nil {
//        let lexer_action_executor = cfg.(*LexerATNConfig).lexer_action_executor;
//        if lexer_action_executor != nil {
//          lexer_action_executor = lexer_action_executor.fix_offset_before_match(input.Index() - self.start_index)
//        }
//        let treat_e_o_f_as_epsilon = (t == TokenEOF);
//        let config = NewLexerATNConfig3(cfg.(*LexerATNConfig), target, lexer_action_executor);
//        if self.closure(input, config, reach,
//          current_alt_reached_accept_state, true, treat_e_o_f_as_epsilon) {
//          // any remaining configs for l alt have a lower priority
//          // than the one that just reached an accept state.
//          SkipAlt = cfg.GetAlt()
//        }
//      }
//    }
//  }
//}
//
//fn accept(&self, input CharStream, lexer_action_executor *LexerActionExecutor, start_index, index,: line, char_pos: i32) {
//  if LexerATNSimulatorDebug {
//    fmt.Printf("ACTION %s\n", lexer_action_executor)
//  }
//  // seek to after last char in token
//  input.Seek(index)
//  self.Line = line
//  self.CharPositionInLine = char_pos
//  if lexer_action_executor != nil && self.recog != nil {
//    lexer_action_executor.execute(self.recog, input, start_index)
//  }
//}
//
//fn get_reachable_target(&self, trans: Transition, t: i32) -> ATNState {
//  if trans.Matches(t, 0, 0xFFFE) {
//    return trans.get_target()
//  }
//
//  return nil
//}
//
//fn compute_start_state(&self, input: CharStream, p: ATNState) -> *OrderedATNConfigSet {
//  let configs = NewOrderedATNConfigSet();
//  for let i = 0; i < len(self.GetTransitions()); i++ {;
//    let target = self.GetTransitions()[i].get_target();
//    let cfg = NewLexerATNConfig6(target, i+1, BasePredictionContextEMPTY);
//    self.closure(input, cfg, configs, false, false, false)
//  }
//
//  return configs
//}
//
//// Since the alternatives within any lexer decision are ordered by
//// preference, l method stops pursuing the closure as soon as an accept
//// state is reached. After the first accept state is reached by depth-first
//// search from {@code config}, all other (potentially reachable) states for
//// l rule would have a lower priority.
////
//// @return {@code true} if an accept state is reached, otherwise
//// {@code false}.
//fn closure(input CharStream, config *LexerATNConfig, configs: ATNConfigSet,
//  current_alt_reached_accept_state, speculative, treat_e_o_f_as_epsilon bool) bool {
//
//  if LexerATNSimulatorDebug {
//    fmt.Println("closure(" + config.String() + ")") // config.String(self.recog, true) + ")")
//  }
//
//  _, let ok = config.state.(*RuleStopState);
//  if ok {
//
//    if LexerATNSimulatorDebug {
//      if self.recog != nil {
//        fmt.Printf("closure at %s rule stop %s\n", self.recog.GetRuleNames()[config.state.GetRuleIndex()], config)
//      } else {
//        fmt.Printf("closure at rule stop %s\n", config)
//      }
//    }
//
//    if config.context == nil || config.context.has_empty_path() {
//      if config.context == nil || config.context.is_empty() {
//        configs.Add(config, nil)
//        return true
//      }
//
//      configs.Add(NewLexerATNConfig2(config, config.state, BasePredictionContextEMPTY), nil)
//      current_alt_reached_accept_state = true
//    }
//    if config.context != nil && !config.context.is_empty() {
//      for let i = 0; i < config.context.length(); i++ {;
//        if config.context.get_return_state(i) != BasePredictionContextEmptyReturnState {
//          let new_context = config.context.GetParent(i) // "pop" return state;
//          let return_state = self.atn.states[config.context.get_return_state(i)];
//          let cfg = NewLexerATNConfig2(config, return_state, new_context);
//          current_alt_reached_accept_state = self.closure(input, cfg, configs, current_alt_reached_accept_state, speculative, treat_e_o_f_as_epsilon)
//        }
//      }
//    }
//    return current_alt_reached_accept_state
//  }
//  // optimization
//  if !config.state.GetEpsilonOnlyTransitions() {
//    if !currentAltReachedAcceptState || !config.passed_through_non_greedy_decision {
//      configs.Add(config, nil)
//    }
//  }
//  for let j = 0; j < len(config.state.GetTransitions()); j++ {;
//    let trans = config.state.GetTransitions()[j];
//    let cfg = self.get_epsilon_target(input, config, trans, configs, speculative, treat_e_o_f_as_epsilon);
//    if cfg != nil {
//      current_alt_reached_accept_state = self.closure(input, cfg, configs,
//        current_alt_reached_accept_state, speculative, treat_e_o_f_as_epsilon)
//    }
//  }
//  return current_alt_reached_accept_state
//}
//
//// side-effect: can alter configs.has_semantic_context
//fn get_epsilon_target(input CharStream, config *LexerATNConfig, trans: Transition,
//  configs ATNConfigSet, speculative, treat_e_o_f_as_epsilon bool) *LexerATNConfig {
//
//  var cfg *LexerATNConfig
//
//  if trans.get_serialization_type() == TransitionRULE {
//
//    let rt = trans.(*RuleTransition);
//    let new_context = SingletonBasePredictionContextCreate(config.context, rt.follow_state.GetStateNumber());
//    cfg = NewLexerATNConfig2(config, trans.get_target(), new_context)
//
//  } else if trans.get_serialization_type() == TransitionPRECEDENCE {
//    panic("Precedence predicates are not supported in lexers.")
//  } else if trans.get_serialization_type() == TransitionPREDICATE {
//    // Track traversing semantic predicates. If we traverse,
//    // we cannot add a DFA state for l "reach" computation
//    // because the DFA would not test the predicate again in the
//    // future. Rather than creating collections of semantic predicates
//    // like v3 and testing them on prediction, v4 will test them on the
//    // fly all the time using the ATN not the DFA. This is slower but
//    // semantically it's not used that often. One of the key elements to
//    // l predicate mechanism is not adding DFA states that see
//    // predicates immediately afterwards in the ATN. For example,
//
//    // a : ID {p1}? | ID {p2}?
//
//    // should create the start state for rule 'a' (to save start state
//    // competition), but should not create target of ID state. The
//    // collection of ATN states the following ID references includes
//    // states reached by traversing predicates. Since l is when we
//    // test them, we cannot cash the DFA state target of ID.
//
//    let pt = trans.(*PredicateTransition);
//
//    if LexerATNSimulatorDebug {
//      fmt.Println("EVAL rule " + strconv.Itoa(trans.(*PredicateTransition).rule_index) + ":" + strconv.Itoa(pt.pred_index))
//    }
//    configs.SetHasSemanticContext(true)
//    if self.evaluate_predicate(input, pt.rule_index, pt.pred_index, speculative) {
//      cfg = NewLexerATNConfig4(config, trans.get_target())
//    }
//  } else if trans.get_serialization_type() == TransitionACTION {
//    if config.context == nil || config.context.has_empty_path() {
//      // execute actions anywhere in the start rule for a token.
//      //
//      // TODO: if the entry rule is invoked recursively, some
//      // actions may be executed during the recursive call. The
//      // problem can appear when has_empty_path() is true but
//      // is_empty() is false. In l case, the config needs to be
//      // split i32o two contexts - one with just the empty path
//      // and another with everything but the empty path.
//      // Unfortunately, the current algorithm does not allow
//      // get_epsilon_target to return two configurations, so
//      // additional modifications are needed before we can support
//      // the split operation.
//      let lexer_action_executor = LexerActionExecutorappend(config.lexer_action_executor, self.atn.lexer_actions[trans.(*ActionTransition).action_index]);
//      cfg = NewLexerATNConfig3(config, trans.get_target(), lexer_action_executor)
//    } else {
//      // ignore actions in referenced rules
//      cfg = NewLexerATNConfig4(config, trans.get_target())
//    }
//  } else if trans.get_serialization_type() == TransitionEPSILON {
//    cfg = NewLexerATNConfig4(config, trans.get_target())
//  } else if trans.get_serialization_type() == TransitionATOM ||
//    trans.get_serialization_type() == TransitionRANGE ||
//    trans.get_serialization_type() == TransitionSET {
//    if treat_e_o_f_as_epsilon {
//      if trans.Matches(TokenEOF, 0, 0xFFFF) {
//        cfg = NewLexerATNConfig4(config, trans.get_target())
//      }
//    }
//  }
//  return cfg
//}
//
//// Evaluate a predicate specified in the lexer.
////
//// <p>If {@code speculative} is {@code true}, l method was called before
//// {@link //consume} for the Matched character. This method should call
//// {@link //consume} before evaluating the predicate to ensure position
//// sensitive values, including {@link Lexer//GetText}, {@link Lexer//GetLine},
//// and {@link Lexer//getcolumn}, properly reflect the current
//// lexer state. This method should restore {@code input} and the simulator
//// to the original state before returning (self.e. undo the actions made by the
//// call to {@link //consume}.</p>
////
//// @param input The input stream.
//// @param rule_index The rule containing the predicate.
//// @param pred_index The index of the predicate within the rule.
//// @param speculative {@code true} if the current index in {@code input} is
//// one character before the predicate's location.
////
//// @return {@code true} if the specified predicate evaluates to
//// {@code true}.
//// /
//fn evaluate_predicate(&self, input CharStream, rule_index, pred_index: i32, speculative: bool) -> bool {
//  // assume true if no recognizer was provided
//  if self.recog == nil {
//    return true
//  }
//  if !speculative {
//    return self.recog.Sempred(nil, rule_index, pred_index)
//  }
//  let savedcolumn = self.CharPositionInLine;
//  let saved_line = self.Line;
//  let index = input.Index();
//  let marker = input.Mark();
//
//  defer func() {
//    self.CharPositionInLine = savedcolumn
//    self.Line = saved_line
//    input.Seek(index)
//    input.Release(marker)
//  }()
//
//  self.Consume(input)
//  return self.recog.Sempred(nil, rule_index, pred_index)
//}
//
//fn capture_sim_state(&self, settings *SimState, input: CharStream, dfa_state *DFAState) {
//  settings.index = input.Index()
//  settings.line = self.Line
//  settings.column = self.CharPositionInLine
//  settings.dfa_state = dfa_state
//}
//
//fn add_d_f_a_edge(&self, from *DFAState, tk: i32, to *DFAState, cfgs: ATNConfigSet) -> *DFAState {
//  if to == nil && cfgs != nil {
//    // leading to l call, ATNConfigSet.has_semantic_context is used as a
//    // marker indicating dynamic predicate evaluation makes l edge
//    // dependent on the specific input sequence, so the static edge in the
//    // DFA should be omitted. The target DFAState is still created since
//    // exec_a_t_n has the ability to re_synchronize with the DFA state cache
//    // following the predicate evaluation step.
//    //
//    // TJP notes: next time through the DFA, we see a pred again and eval.
//    // If that gets us to a previously created (but dangling) DFA
//    // state, we can continue in pure DFA mode from there.
//    // /
//    let suppress_edge = cfgs.HasSemanticContext();
//    cfgs.SetHasSemanticContext(false)
//
//    to = self.add_d_f_a_state(cfgs)
//
//    if suppress_edge {
//      return to
//    }
//  }
//  // add the edge
//  if tk < LexerATNSimulatorMinDFAEdge || tk > LexerATNSimulatorMaxDFAEdge {
//    // Only track edges within the DFA bounds
//    return to
//  }
//  if LexerATNSimulatorDebug {
//    fmt.Println("EDGE " + from.String() + " -> " + to.String() + " upon " + strconv.Itoa(tk))
//  }
//  if from.edges == nil {
//    // make room for tokens 1..n and -1 masquerading as index 0
//    from.edges = make([]*DFAState, LexerATNSimulatorMaxDFAEdge-LexerATNSimulatorMinDFAEdge+1)
//  }
//  from.edges[tk-LexerATNSimulatorMinDFAEdge] = to // connect
//
//  return to
//}
//
//// Add a NewDFA state if there isn't one with l set of
//// configurations already. This method also detects the first
//// configuration containing an ATN rule stop state. Later, when
//// traversing the DFA, we will know which rule to accept.
//fn add_d_f_a_state(&self, configs: ATNConfigSet) -> *DFAState {
//
//  let proposed = NewDFAState(-1, configs);
//  var first_config_with_rule_stop_state ATNConfig
//
//  for _, let cfg = range configs.GetItems() {;
//
//    _, let ok = cfg.GetState().(*RuleStopState);
//
//    if ok {
//      first_config_with_rule_stop_state = cfg
//      break
//    }
//  }
//  if first_config_with_rule_stop_state != nil {
//    proposed.is_accept_state = true
//    proposed.lexer_action_executor = first_config_with_rule_stop_state.(*LexerATNConfig).lexer_action_executor
//    proposed.set_prediction(self.atn.rule_to_token_type[firstConfigWithRuleStopState.GetState().GetRuleIndex()])
//  }
//  let hash = proposed.Hash();
//  let dfa = self.decision_to_d_f_a[self.mode];
//  let existing = dfa.GetStates()[hash];
//  if existing != nil {
//    return existing
//  }
//  let new_state = proposed;
//  new_state.state_number = len(dfa.GetStates())
//  configs.SetReadOnly(true)
//  new_state.configs = configs
//  dfa.GetStates()[hash] = new_state
//  return new_state
//}
//
//fn get_d_f_a(&self, mode: i32) -> *DFA {
//  return self.decision_to_d_f_a[mode]
//}
//
//// Get the text Matched so far for the current token.
//pub fn GetText(&self, input: CharStream) -> &str {
//  // index is first lookahead char, don't include.
//  return input.GetTextFromInterval(NewInterval(self.start_index, input.Index()-1))
//}
//
//pub fn Consume(&self, input: CharStream) {
//  let cur_char = input.LA(1);
//  if cur_char == i32('\n') {
//    self.Line++
//    self.CharPositionInLine = 0
//  } else {
//    self.CharPositionInLine++
//  }
//  input.Consume()
//}
//
//pub fn GetCharPositionInLine(&self, ) -> i32 {
//  return self.CharPositionInLine
//}
//
//pub fn GetLine(&self, ) -> i32 {
//  return self.Line
//}
//
//pub fn GetTokenName(&self, tt: i32) -> &str {
//  if tt == -1 {
//    return "EOF"
//  }
//
//  return "'" + &str(tt) + "'"
//}
//
//fn reset_sim_state(sim *SimState) { // non-member
//  sim.index = -1
//  sim.line = 0
//  sim.column = -1
//  sim.dfa_state = nil
//}
//
//pub struct SimState {
//  index:    i32
//  line:     i32
//  column:   i32
//  dfa_state: *DFAState
//}
//
//impl SimState {ยง//  fn new(&self, ) -> *SimState {
//  let s = new(SimState);
//  reset_sim_state(s)
//  return s
//}
//
//fn reset(&self, ) {
//  reset_sim_state(s)
//}
