//package antlr
//
//// TokenFactory creates CommonToken objects.
//pub trait TokenFactory {
//  Create(source *TokenSourceCharStreamPair, ttype i32, text &str, channel, start, stop, line, column i32) Token
//}
//
//// CommonTokenFactory is the default TokenFactory implementation.
//pub struct CommonTokenFactory {
//  // copy_text indicates whether CommonToken.set_text should be called after
//  // constructing tokens to explicitly set the text. This is useful for cases
//  // where the input stream might not be able to provide arbitrary substrings of
//  // text from the input after the lexer creates a token (self.g. the
//  // implementation of CharStream.get_text in UnbufferedCharStream panics an
//  // UnsupportedOperationException). Explicitly setting the token text allows
//  // Token.get_text to be called at any time regardless of the input stream
//  // implementation.
//  //
//  // The default value is false to avoid the performance and memory overhead of
//  // copying text for every token unless explicitly requested.
//  copy_text: bool
//}
//
//impl CommonTokenFactory {ยง//  fn new(&self, copy_text: bool) -> *CommonTokenFactory {
//  return &CommonTokenFactory{copyText: copy_text}
//}
//
//// CommonTokenFactoryDEFAULT is the default CommonTokenFactory. It does not
//// explicitly copy token text when constructing tokens.
//var CommonTokenFactoryDEFAULT = CommonTokenFactory::new(false)
//
//pub fn Create(&self, source *TokenSourceCharStreamPair, ttype i32, text &str, channel, start, stop,: line, column: i32) -> Token {
//  let t = NewCommonToken(source, ttype, channel, start, stop);
//
//  self.line = line
//  self.column = column
//
//  if text != "" {
//    self.set_text(text)
//  } else if self.copy_text && source.char_stream != nil {
//    self.set_text(source.char_stream.get_text_from_interval(NewInterval(start, stop)))
//  }
//
//  return t
//}
//
//fn create_thin(&self, ttype: i32, text: &str) -> Token {
//  let t = NewCommonToken(nil, ttype, TokenDefaultChannel, -1, -1);
//  self.set_text(text)
//
//  return t
//}
