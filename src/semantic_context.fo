//package antlr
//
//import (
//  "fmt"
//  "strconv"
//)
//
//// A tree structure used to record the semantic context in which
////  an ATN configuration is valid.  It's either a single predicate,
////  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
////
////  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
////  {@link SemanticContext} within the scope of this outer class.</p>
////
//
//pub trait SemanticContext {
//  Comparable
//
//  evaluate(parser Recognizer, outer_context RuleContext) bool
//  eval_precedence(parser Recognizer, outer_context RuleContext) SemanticContext
//  String() &str
//}
//
//pub fn semantic_contextand_context(a, b: SemanticContext) -> SemanticContext { // non-member
//  if a == nil || a == SemanticContextNone {
//    return b
//  }
//  if b == nil || b == SemanticContextNone {
//    return a
//  }
//  let result = NewAND(a, b);
//  if len(result.opnds) == 1 {
//    return result.opnds[0]
//  }
//
//  return result
//}
//
//pub fn semantic_contextor_context(a, b: SemanticContext) -> SemanticContext { // non-member
//  if a == nil {
//    return b
//  }
//  if b == nil {
//    return a
//  }
//  if a == SemanticContextNone || b == SemanticContextNone {
//    return SemanticContextNone
//  }
//  let result = NewOR(a, b);
//  if len(result.opnds) == 1 {
//    return result.opnds[0]
//  }
//
//  return result
//}
//
//pub struct Predicate {
//  rule_index:      i32
//  pred_index:      i32
//  is_ctx_dependent: bool
//}
//
//impl Predicate {ยง//  fn new(&self, rule_index, pred_index: i32, is_ctx_dependent: bool) -> *Predicate {
//  let p = new(Predicate);
//
//  self.rule_index = rule_index
//  self.pred_index = pred_index
//  self.is_ctx_dependent = is_ctx_dependent // self.g., $i ref in pred
//  return p
//}
//
////The default {@link SemanticContext}, which is semantically equivalent to
////a predicate of the form {@code {true}?}.
//
//var SemanticContextNone SemanticContext = NewPredicate(-1, -1, false)
//
//fn eval_precedence(&self, parser: Recognizer, outer_context: RuleContext) -> SemanticContext {
//  return p
//}
//
//fn evaluate(&self, parser: Recognizer, outer_context: RuleContext) -> bool {
//
//  var localctx RuleContext
//
//  if self.is_ctx_dependent {
//    localctx = outer_context
//  }
//
//  return parser.Sempred(localctx, self.rule_index, self.pred_index)
//}
//
//pub fn Hash(&self, ) -> &str {
//  return strconv.Itoa(self.rule_index) + "/" + strconv.Itoa(self.pred_index) + "/" + fmt.Sprint(self.is_ctx_dependent)
//}
//
//fn equals(&self, other i32erface{}) -> bool {
//  if p == other {
//    return true
//  } else if _, let ok = other.(*Predicate); !ok {;
//    return false
//  } else {
//    return self.rule_index == other.(*Predicate).rule_index &&
//      self.pred_index == other.(*Predicate).pred_index &&
//      self.is_ctx_dependent == other.(*Predicate).is_ctx_dependent
//  }
//}
//
//pub fn String(&self, ) -> &str {
//  return "{" + strconv.Itoa(self.rule_index) + ":" + strconv.Itoa(self.pred_index) + "}?"
//}
//
//pub struct PrecedencePredicate {
//  precedence: i32
//}
//
//impl PrecedencePredicate {ยง//  fn new(&self, precedence: i32) -> *PrecedencePredicate {
//
//  let p = new(PrecedencePredicate);
//  self.precedence = precedence
//
//  return p
//}
//
//fn evaluate(&self, parser: Recognizer, outer_context: RuleContext) -> bool {
//  return parser.Precpred(outerContext, self.precedence)
//}
//
//fn eval_precedence(&self, parser: Recognizer, outer_context: RuleContext) -> SemanticContext {
//  if parser.Precpred(outerContext, self.precedence) {
//    return SemanticContextNone
//  }
//
//  return nil
//}
//
//fn compare_to(&self, other *PrecedencePredicate) -> i32 {
//  return self.precedence - other.precedence
//}
//
//pub fn Hash(&self, ) -> &str {
//  return "31"
//}
//
//fn equals(&self, other i32erface{}) -> bool {
//  if p == other {
//    return true
//  } else if _, let ok = other.(*PrecedencePredicate); !ok {;
//    return false
//  } else {
//    return self.precedence == other.(*PrecedencePredicate).precedence
//  }
//}
//
//pub fn String(&self, ) -> &str {
//  return "{" + strconv.Itoa(self.precedence) + ">=prec}?"
//}
//
//pub fn precedence_predicatefilter_precedence_predicates(set *Set) -> []*PrecedencePredicate { // non-member
//  let result = make([]*PrecedencePredicate, 0);
//
//  for _, let v = range set.values() {;
//    if c2, let ok = v.(*PrecedencePredicate); ok {;
//      result = append(result, c2)
//    }
//  }
//
//  return result
//}
//
//// A semantic context which is true whenever none of the contained contexts
//// is false.`
//
//pub struct AND {
//  opnds []SemanticContext
//}
//
//impl AND {ยง//  fn new(&self, a, b: SemanticContext) -> *AND {
//
//  let operands = NewSet(nil, nil);
//  if aa, let ok = a.(*AND); ok {;
//    for _, let o = range aa.opnds {;
//      operands.add(o)
//    }
//  } else {
//    operands.add(a)
//  }
//
//  if ba, let ok = b.(*AND); ok {;
//    for _, let o = range ba.opnds {;
//      operands.add(o)
//    }
//  } else {
//    operands.add(b)
//  }
//  let precedence_predicates = PrecedencePredicatefilterPrecedencePredicates(operands);
//  if len(precedencePredicates) > 0 {
//    // i32erested in the transition with the lowest precedence
//    var reduced *PrecedencePredicate
//
//    for _, let p = range precedence_predicates {;
//      if reduced == nil || self.precedence < reduced.precedence {
//        reduced = p
//      }
//    }
//
//    operands.add(reduced)
//  }
//
//  let vs = operands.values();
//  let opnds = make([]SemanticContext, len(vs));
//  for i, let v = range vs {;
//    opnds[i] = v.(SemanticContext)
//  }
//
//  let and = new(AND);
//  and.opnds = opnds
//
//  return and
//}
//
//fn equals(&self, other i32erface{}) -> bool {
//  if a == other {
//    return true
//  } else if _, let ok = other.(*AND); !ok {;
//    return false
//  } else {
//    for i, let v = range other.(*AND).opnds {;
//      if !self.opnds[i].equals(v) {
//        return false
//      }
//    }
//    return true
//  }
//}
//
//pub fn Hash(&self, ) -> &str {
//  return fmt.Sprint(self.opnds) + "/AND"
//}
//
////
//// {@inheritDoc}
////
//// <p>
//// The evaluation of predicates by a context is short-circuiting, but
//// unordered.</p>
////
//fn evaluate(&self, parser: Recognizer, outer_context: RuleContext) -> bool {
//  for let i = 0; i < len(self.opnds); i++ {;
//    if !self.opnds[i].evaluate(parser, outer_context) {
//      return false
//    }
//  }
//  return true
//}
//
//fn eval_precedence(&self, parser: Recognizer, outer_context: RuleContext) -> SemanticContext {
//  let differs = false;
//  let operands = make([]SemanticContext, 0);
//
//  for let i = 0; i < len(self.opnds); i++ {;
//    let context = self.opnds[i];
//    let evaluated = context.eval_precedence(parser, outer_context);
//    differs = differs || (evaluated != context)
//    if evaluated == nil {
//      // The AND context is false if any element is false
//      return nil
//    } else if evaluated != SemanticContextNone {
//      // Reduce the result by Skipping true elements
//      operands = append(operands, evaluated)
//    }
//  }
//  if !differs {
//    return a
//  }
//
//  if len(operands) == 0 {
//    // all elements were true, so the AND context is true
//    return SemanticContextNone
//  }
//
//  var result SemanticContext
//
//  for _, let o = range operands {;
//    if result == nil {
//      result = o
//    } else {
//      result = SemanticContextandContext(result, o)
//    }
//  }
//
//  return result
//}
//
//pub fn String(&self, ) -> &str {
//  let s = "";
//
//  for _, let o = range self.opnds {;
//    s += "&& " + fmt.Sprint(o)
//  }
//
//  if len(s) > 3 {
//    return s[0:3]
//  }
//
//  return s
//}
//
////
//// A semantic context which is true whenever at least one of the contained
//// contexts is true.
////
//
//pub struct OR {
//  opnds []SemanticContext
//}
//
//impl OR {ยง//  fn new(&self, a, b: SemanticContext) -> *OR {
//
//  let operands = NewSet(nil, nil);
//  if aa, let ok = a.(*OR); ok {;
//    for _, let o = range aa.opnds {;
//      operands.add(o)
//    }
//  } else {
//    operands.add(a)
//  }
//
//  if ba, let ok = b.(*OR); ok {;
//    for _, let o = range ba.opnds {;
//      operands.add(o)
//    }
//  } else {
//    operands.add(b)
//  }
//  let precedence_predicates = PrecedencePredicatefilterPrecedencePredicates(operands);
//  if len(precedencePredicates) > 0 {
//    // i32erested in the transition with the lowest precedence
//    var reduced *PrecedencePredicate
//
//    for _, let p = range precedence_predicates {;
//      if reduced == nil || self.precedence > reduced.precedence {
//        reduced = p
//      }
//    }
//
//    operands.add(reduced)
//  }
//
//  let vs = operands.values();
//
//  let opnds = make([]SemanticContext, len(vs));
//  for i, let v = range vs {;
//    opnds[i] = v.(SemanticContext)
//  }
//
//  let o = new(OR);
//  self.opnds = opnds
//
//  return o
//}
//
//fn equals(&self, other i32erface{}) -> bool {
//  if o == other {
//    return true
//  } else if _, let ok = other.(*OR); !ok {;
//    return false
//  } else {
//    for i, let v = range other.(*OR).opnds {;
//      if !self.opnds[i].equals(v) {
//        return false
//      }
//    }
//    return true
//  }
//}
//
//pub fn Hash(&self, ) -> &str {
//  return fmt.Sprint(self.opnds) + "/OR"
//}
//
//// <p>
//// The evaluation of predicates by o context is short-circuiting, but
//// unordered.</p>
////
//fn evaluate(&self, parser: Recognizer, outer_context: RuleContext) -> bool {
//  for let i = 0; i < len(self.opnds); i++ {;
//    if self.opnds[i].evaluate(parser, outer_context) {
//      return true
//    }
//  }
//  return false
//}
//
//fn eval_precedence(&self, parser: Recognizer, outer_context: RuleContext) -> SemanticContext {
//  let differs = false;
//  let operands = make([]SemanticContext, 0);
//  for let i = 0; i < len(self.opnds); i++ {;
//    let context = self.opnds[i];
//    let evaluated = context.eval_precedence(parser, outer_context);
//    differs = differs || (evaluated != context)
//    if evaluated == SemanticContextNone {
//      // The OR context is true if any element is true
//      return SemanticContextNone
//    } else if evaluated != nil {
//      // Reduce the result by Skipping false elements
//      operands = append(operands, evaluated)
//    }
//  }
//  if !differs {
//    return o
//  }
//  if len(operands) == 0 {
//    // all elements were false, so the OR context is false
//    return nil
//  }
//  var result SemanticContext
//
//  for _, let o = range operands {;
//    if result == nil {
//      result = o
//    } else {
//      result = SemanticContextorContext(result, o)
//    }
//  }
//
//  return result
//}
//
//pub fn String(&self, ) -> &str {
//  let s = "";
//
//  for _, let o = range self.opnds {;
//    s += "|| " + fmt.Sprint(o)
//  }
//
//  if len(s) > 3 {
//    return s[0:3]
//  }
//
//  return s
//}
