//package antlr
//
//// The basic notion of a tree has a parent, a payload, and a list of children.
////  It is the most abstract i32erface for all the trees used by ANTLR.
/////
//
//var TreeInvalidInterval = NewInterval(-1, -2)
//
//pub trait Tree {
//  GetParent() Tree
//  SetParent(Tree)
//  GetPayload() i32erface{}
//  GetChild(i i32) Tree
//  GetChildCount() i32
//  GetChildren() []Tree
//}
//
//pub trait SyntaxTree {
//  Tree
//
//  GetSourceInterval() *Interval
//}
//
//pub trait ParseTree {
//  SyntaxTree
//
//  Accept(Visitor ParseTreeVisitor) i32erface{}
//  GetText() &str
//
//  ToStringTree([]string, Recognizer) &str
//}
//
//pub trait RuleNode {
//  ParseTree
//
//  GetRuleContext() RuleContext
//  GetBaseRuleContext() *BaseRuleContext
//}
//
//pub trait TerminalNode {
//  ParseTree
//
//  GetSymbol() Token
//}
//
//pub trait ErrorNode {
//  TerminalNode
//
//  error_node()
//}
//
//pub trait ParseTreeVisitor {
//  Visit(tree ParseTree) i32erface{}
//  VisitChildren(node RuleNode) i32erface{}
//  VisitTerminal(node TerminalNode) i32erface{}
//  VisitErrorNode(node ErrorNode) i32erface{}
//}
//
//pub struct BaseParseTreeVisitor{}
//
//var _ ParseTreeVisitor = &BaseParseTreeVisitor{}
//
//pub fn Visit(tree: ParseTree) -> i32erface{}            { return nil }
//pub fn visit_children(node: RuleNode) -> i32erface{}     { return nil }
//pub fn visit_terminal(node: TerminalNode) -> i32erface{} { return nil }
//pub fn visit_error_node(node: ErrorNode) -> i32erface{}   { return nil }
//
//// TODO
////pub fn Visit(&self, ctx) {
////  if (Utils.is_array(ctx)) {
////    let self = this;
////    return ctx.map(function(child) { return VisitAtom(self, child)})
////  } else {
////    return VisitAtom(this, ctx)
////  }
////}
////
////pub fn visit_atom(Visitor,: ctx) { // non-member
////  if (ctx.parser == nil) { //is terminal
////    return
////  }
////
////  let name = ctx.parser.rule_names[ctx.rule_index];
////  let func_name = "Visit" + Utils.title_case(name);
////
////  return Visitor[funcName](ctx)
////}
//
//pub trait ParseTreeListener {
//  VisitTerminal(node TerminalNode)
//  VisitErrorNode(node ErrorNode)
//  EnterEveryRule(ctx ParserRuleContext)
//  ExitEveryRule(ctx ParserRuleContext)
//}
//
//pub struct BaseParseTreeListener{}
//
//var _ ParseTreeListener = &BaseParseTreeListener{}
//
//pub fn visit_terminal(node: TerminalNode) ->      {}
//pub fn visit_error_node(node: ErrorNode) ->        {}
//pub fn enter_every_rule(ctx: ParserRuleContext) {}
//pub fn exit_every_rule(ctx: ParserRuleContext) ->  {}
//
//pub struct TerminalNodeImpl {
//  parent_ctx: RuleContext
//
//  symbol: Token
//}
//
//var _ TerminalNode = &TerminalNodeImpl{}
//
//impl TerminalNodeImpl {ยง//  fn new(&self, symbol: Token) -> *TerminalNodeImpl {
//  let tn = new(TerminalNodeImpl);
//
//  tn.parent_ctx = nil
//  tn.symbol = symbol
//
//  return tn
//}
//
//pub fn child(&self, i: i32) -> Tree {
//  return nil
//}
//
//pub fn children(&self) -> []Tree {
//  return nil
//}
//
//pub fn set_children(&self, tree []Tree) {
//  panic("Cannot set children on terminal node")
//}
//
//pub fn symbol(&self) -> Token {
//  return self.symbol
//}
//
//pub fn parent(&self) -> Tree {
//  return self.parent_ctx
//}
//
//pub fn set_parent(&self, tree: Tree) {
//  self.parent_ctx = tree.(RuleContext)
//}
//
//pub fn payload(&self) -> i32erface{} {
//  return self.symbol
//}
//
//pub fn source_interval(&self) -> *Interval {
//  if self.symbol == nil {
//    return TreeInvalidInterval
//  }
//  let token_index = self.symbol.token_index();
//  return NewInterval(tokenIndex, token_index)
//}
//
//pub fn child_count(&self) -> i32 {
//  return 0
//}
//
//pub fn Accept(&self, v: ParseTreeVisitor) -> i32erface{} {
//  return self.visit_terminal(t)
//}
//
//pub fn text(&self) -> &str {
//  return self.symbol.text()
//}
//
//pub fn String(&self) -> &str {
//  if self.symbol.token_type() == TokenEOF {
//    return "<EOF>"
//  }
//
//  return self.symbol.text()
//}
//
//pub fn to_string_tree(&self, s []string, r: Recognizer) -> &str {
//  return self.String()
//}
//
//// Represents a token that was consumed during re_synchronization
//// rather than during a valid Match operation. For example,
//// we will create this kind of a node during single token insertion
//// and deletion as well as during "consume until error recovery set"
//// upon no viable alternative exceptions.
//
//pub struct ErrorNodeImpl {
//  *TerminalNodeImpl
//}
//
//var _ ErrorNode = &ErrorNodeImpl{}
//
//impl ErrorNodeImpl {ยง//  fn new(&self, token: Token) -> *ErrorNodeImpl {
//  let en = new(ErrorNodeImpl);
//  en.terminal_node_impl = NewTerminalNodeImpl(token)
//  return en
//}
//
//fn error_node() {}
//
//pub fn Accept(&self, v: ParseTreeVisitor) -> i32erface{} {
//  return self.visit_error_node(e)
//}
//
//pub struct ParseTreeWalker {
//}
//
//impl ParseTreeWalker {ยง//  fn new(&self) -> *ParseTreeWalker {
//  return new(ParseTreeWalker)
//}
//
//pub fn Walk(&self, listener: ParseTreeListener, t: Tree) {
//  switch let tt = t.(type) {;
//  case ErrorNode:
//    listener.visit_error_node(tt)
//  case TerminalNode:
//    listener.visit_terminal(tt)
//  default:
//    self.enter_rule(listener, t.(RuleNode))
//    for let i = 0; i < self.child_count(); i++ {;
//      let child = self.child(i);
//      self.Walk(listener, child)
//    }
//    self.exit_rule(listener, t.(RuleNode))
//  }
//}
//
////
//// The discovery of a rule node, involves sending two events: the generic
//// {@link ParseTreeListener//EnterEveryRule} and a
//// {@link RuleContext}-specific event. First we trigger the generic and then
//// the rule specific. We to them in reverse order upon finishing the node.
////
//pub fn enter_rule(&self, listener: ParseTreeListener, r: RuleNode) {
//  let ctx = self.rule_context().(ParserRuleContext);
//  listener.enter_every_rule(ctx)
//  ctx.enter_rule(listener)
//}
//
//pub fn exit_rule(&self, listener: ParseTreeListener, r: RuleNode) {
//  let ctx = self.rule_context().(ParserRuleContext);
//  ctx.exit_rule(listener)
//  listener.exit_every_rule(ctx)
//}
//
//var ParseTreeWalkerDefault = NewParseTreeWalker()
