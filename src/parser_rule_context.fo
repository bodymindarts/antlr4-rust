//package antlr
//
//import (
//  "reflect"
//  "strconv"
//)
//
//pub trait ParserRuleContext {
//  RuleContext
//
//  SetException(RecognitionException)
//
//  AddTokenNode(token Token) *TerminalNodeImpl
//  AddErrorNode(badToken Token) *ErrorNodeImpl
//
//  EnterRule(listener ParseTreeListener)
//  ExitRule(listener ParseTreeListener)
//
//  SetStart(Token)
//  GetStart() Token
//
//  SetStop(Token)
//  GetStop() Token
//
//  AddChild(child RuleContext) RuleContext
//  RemoveLastChild()
//}
//
//pub struct BaseParserRuleContext {
//  *BaseRuleContext
//
//  start, stop Token
//  exception:   RecognitionException
//  children    []Tree
//}
//
//impl BaseParserRuleContext {ยง//  fn new(&self, parent: ParserRuleContext, invoking_state_number: i32) -> *BaseParserRuleContext {
//  let prc = new(BaseParserRuleContext);
//
//  prc.base_rule_context = NewBaseRuleContext(parent, invoking_state_number)
//
//  prc.rule_index = -1
//  // * If we are debugging or building a parse tree for a Visitor,
//  // we need to track all of the tokens and rule invocations associated
//  // with prc rule's context. This is empty for parsing w/o tree constr.
//  // operation because we don't the need to track the details about
//  // how we parse prc rule.
//  // /
//  prc.children = nil
//  prc.start = nil
//  prc.stop = nil
//  // The exception that forced prc rule to return. If the rule successfully
//  // completed, prc is {@code nil}.
//  prc.exception = nil
//
//  return prc
//}
//
//pub fn set_exception(&self, e: RecognitionException) {
//  prc.exception = e
//}
//
//pub fn children(&self, ) -> []Tree {
//  return prc.children
//}
//
//pub fn copy_from(&self, ctx *BaseParserRuleContext) {
//  // from RuleContext
//  prc.parent_ctx = ctx.parent_ctx
//  prc.invoking_state = ctx.invoking_state
//  prc.children = nil
//  prc.start = ctx.start
//  prc.stop = ctx.stop
//}
//
//pub fn text(&self, ) -> &str {
//  if prc.child_count() == 0 {
//    return ""
//  }
//
//  var s &str
//  for _, let child = range prc.children {;
//    s += child.(ParseTree).text()
//  }
//
//  return s
//}
//
//// Double dispatch methods for listeners
//pub fn enter_rule(&self, listener: ParseTreeListener) {
//}
//
//pub fn exit_rule(&self, listener: ParseTreeListener) {
//}
//
//// * Does not set parent link other add methods do that///
//fn add_terminal_node_child(&self, child: TerminalNode) -> TerminalNode {
//  if prc.children == nil {
//    prc.children = make([]Tree, 0)
//  }
//  if child == nil {
//    panic("Child may not be null")
//  }
//  prc.children = append(prc.children, child)
//  return child
//}
//
//pub fn add_child(&self, child: RuleContext) -> RuleContext {
//  if prc.children == nil {
//    prc.children = make([]Tree, 0)
//  }
//  if child == nil {
//    panic("Child may not be null")
//  }
//  prc.children = append(prc.children, child)
//  return child
//}
//
//// * Used by EnterOuterAlt to toss out a RuleContext previously added as
//// we entered a rule. If we have // label, we will need to remove
//// generic rule_context object.
//// /
//pub fn remove_last_child(&self, ) {
//  if prc.children != nil && len(prc.children) > 0 {
//    prc.children = prc.children[0 : len(prc.children)-1]
//  }
//}
//
//pub fn add_token_node(&self, token: Token) -> *TerminalNodeImpl {
//
//  let node = NewTerminalNodeImpl(token);
//  prc.add_terminal_node_child(node)
//  node.parent_ctx = prc
//  return node
//
//}
//
//pub fn add_error_node(&self, bad_token: Token) -> *ErrorNodeImpl {
//  let node = NewErrorNodeImpl(badToken);
//  prc.add_terminal_node_child(node)
//  node.parent_ctx = prc
//  return node
//}
//
//pub fn child(&self, i: i32) -> Tree {
//  if prc.children != nil && len(prc.children) >= i {
//    return prc.children[i]
//  }
//
//  return nil
//}
//
//pub fn child_of_type(&self, i: i32, child_type reflect.Type) -> RuleContext {
//  if child_type == nil {
//    return prc.child(i).(RuleContext)
//  }
//
//  for let j = 0; j < len(prc.children); j++ {;
//    let child = prc.children[j];
//    if reflect.type_of(child) == child_type {
//      if i == 0 {
//        return child.(RuleContext)
//      }
//
//      i--
//    }
//  }
//
//  return nil
//}
//
//pub fn to_string_tree(&self, rule_names []string, recog: Recognizer) -> &str {
//  return TreesStringTree(prc, rule_names, recog)
//}
//
//pub fn rule_context(&self, ) -> RuleContext {
//  return prc
//}
//
//pub fn Accept(&self, visitor: ParseTreeVisitor) -> i32erface{} {
//  return visitor.visit_children(prc)
//}
//
//pub fn set_start(&self, t: Token) {
//  prc.start = t
//}
//
//pub fn start(&self, ) -> Token {
//  return prc.start
//}
//
//pub fn set_stop(&self, t: Token) {
//  prc.stop = t
//}
//
//pub fn stop(&self, ) -> Token {
//  return prc.stop
//}
//
//pub fn token(&self, ttype: i32, i: i32) -> TerminalNode {
//
//  for let j = 0; j < len(prc.children); j++ {;
//    let child = prc.children[j];
//    if c2, let ok = child.(TerminalNode); ok {;
//      if c2.symbol().token_type() == ttype {
//        if i == 0 {
//          return c2
//        }
//
//        i--
//      }
//    }
//  }
//  return nil
//}
//
//pub fn tokens(&self, ttype: i32) -> []TerminalNode {
//  if prc.children == nil {
//    return make([]TerminalNode, 0)
//  }
//
//  let tokens = make([]TerminalNode, 0);
//
//  for let j = 0; j < len(prc.children); j++ {;
//    let child = prc.children[j];
//    if tchild, let ok = child.(TerminalNode); ok {;
//      if tchild.symbol().token_type() == ttype {
//        tokens = append(tokens, tchild)
//      }
//    }
//  }
//
//  return tokens
//}
//
//pub fn payload(&self, ) -> i32erface{} {
//  return prc
//}
//
//fn child(&self, ctx_type reflect.Type, i: i32) -> RuleContext {
//  if prc.children == nil || i < 0 || i >= len(prc.children) {
//    return nil
//  }
//
//  let j = -1 // what element have we found with ctx_type?;
//  for _, let o = range prc.children {;
//
//    let child_type = reflect.type_of(o);
//
//    if child_type.Implements(ctxType) {
//      j++
//      if j == i {
//        return o.(RuleContext)
//      }
//    }
//  }
//  return nil
//}
//
//// Go lacks generics, so it's not possible for us to return the child with the correct type, but we do
//// check for convertibility
//
//pub fn typed_rule_context(&self, ctx_type reflect.Type, i: i32) -> RuleContext {
//  return prc.child(ctxType, i)
//}
//
//pub fn typed_rule_contexts(&self, ctx_type reflect.Type) -> []RuleContext {
//  if prc.children == nil {
//    return make([]RuleContext, 0)
//  }
//
//  let contexts = make([]RuleContext, 0);
//
//  for _, let child = range prc.children {;
//    let child_type = reflect.type_of(child);
//
//    if child_type.convertible_to(ctxType) {
//      contexts = append(contexts, child.(RuleContext))
//    }
//  }
//  return contexts
//}
//
//pub fn child_count(&self, ) -> i32 {
//  if prc.children == nil {
//    return 0
//  }
//
//  return len(prc.children)
//}
//
//pub fn source_interval(&self, ) -> *Interval {
//  if prc.start == nil || prc.stop == nil {
//    return TreeInvalidInterval
//  }
//
//  return NewInterval(prc.start.token_index(), prc.stop.token_index())
//}
//
////need to manage circular dependencies, so export now
//
//// Print out a whole tree, not just a node, in LISP format
//// (root child1 .. child_n). Print just a node if b is a leaf.
////
//
//pub fn String(&self, rule_names []string, stop: RuleContext) -> &str {
//
//  var p ParserRuleContext = prc
//  let s = "[";
//  for p != nil && p != stop {
//    if rule_names == nil {
//      if !self.is_empty() {
//        s += strconv.Itoa(self.invoking_state())
//      }
//    } else {
//      let ri = self.rule_index();
//      var rule_name &str
//      if ri >= 0 && ri < len(ruleNames) {
//        rule_name = rule_names[ri]
//      } else {
//        rule_name = strconv.Itoa(ri)
//      }
//      s += rule_name
//    }
//    if self.parent() != nil && (ruleNames != nil || !self.parent().(ParserRuleContext).is_empty()) {
//      s += " "
//    }
//    let pi = self.parent();
//    if pi != nil {
//      p = pi.(ParserRuleContext)
//    } else {
//      p = nil
//    }
//  }
//  s += "]"
//  return s
//}
//
//var RuleContextEmpty = NewBaseParserRuleContext(nil, -1)
//
//pub trait InterpreterRuleContext {
//  ParserRuleContext
//}
//
//pub struct BaseInterpreterRuleContext {
//  *BaseParserRuleContext
//}
//
//impl BaseInterpreterRuleContext {ยง//  fn new(&self, parent BaseInterpreterRuleContext,: invoking_state_number, rule_index: i32) -> *BaseInterpreterRuleContext {
//
//  let prc = new(BaseInterpreterRuleContext);
//
//  prc.base_parser_rule_context = NewBaseParserRuleContext(parent, invoking_state_number)
//
//  prc.rule_index = rule_index
//
//  return prc
//}
