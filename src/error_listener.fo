//package antlr
//
//import (
//	"fmt"
//	"os"
//	"strconv"
//)
//
//// Provides an empty default implementation of {@link ANTLRErrorListener}. The
//// default implementation of each method does nothing, but can be overridden as
//// necessary.
//
//pub trait ErrorListener {
//	SyntaxError(recognizer Recognizer, offendingSymbol i32erface{}, line, column i32, msg &str, e RecognitionException)
//	ReportAmbiguity(recognizer Parser, dfa *DFA, startIndex, stopIndex i32, exact bool, ambigAlts *BitSet, configs ATNConfigSet)
//	ReportAttemptingFullContext(recognizer Parser, dfa *DFA, startIndex, stopIndex i32, conflictingAlts *BitSet, configs ATNConfigSet)
//	ReportContextSensitivity(recognizer Parser, dfa *DFA, startIndex, stopIndex, prediction i32, configs ATNConfigSet)
//}
//
//pub struct DefaultErrorListener {
//}
//
//impl DefaultErrorListener {ยง//  pub fn new() -> *DefaultErrorListener {
//	return new(DefaultErrorListener)
//}
//
//pub fn SyntaxError(recognizer Recognizer, offendingSymbol i32erface{}, line, column i32, msg: &str, e: RecognitionException) {
//}
//
//pub fn ReportAmbiguity(recognizer Parser, dfa *DFA, startIndex, stopIndex i32, exact: bool, ambigAlts *BitSet, configs: ATNConfigSet) {
//}
//
//pub fn ReportAttemptingFullContext(recognizer Parser, dfa *DFA, startIndex, stopIndex: i32, conflictingAlts *BitSet, configs: ATNConfigSet) {
//}
//
//pub fn ReportContextSensitivity(recognizer Parser, dfa *DFA, startIndex, stopIndex, prediction: i32, configs: ATNConfigSet) {
//}
//
//pub struct ConsoleErrorListener {
//	*DefaultErrorListener
//}
//
//impl ConsoleErrorListener {ยง//  pub fn new() -> *ConsoleErrorListener {
//	return new(ConsoleErrorListener)
//}
//
////
//// Provides a default instance of {@link ConsoleErrorListener}.
////
//var ConsoleErrorListenerINSTANCE = NewConsoleErrorListener()
//
////
//// {@inheritDoc}
////
//// <p>
//// This implementation prints messages to {@link System//err} containing the
//// values of {@code line}, {@code charPositionInLine}, and {@code msg} using
//// the following format.</p>
////
//// <pre>
//// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
//// </pre>
////
//pub fn SyntaxError(recognizer Recognizer, offendingSymbol i32erface{}, line, column i32, msg: &str, e: RecognitionException) {
//	fmt.Fprintln(os.Stderr, "line "+strconv.Itoa(line)+":"+strconv.Itoa(column)+" "+msg)
//}
//
//pub struct ProxyErrorListener {
//	*DefaultErrorListener
//	delegates []ErrorListener
//}
//
//impl ProxyErrorListener {ยง//  pub fn new(delegates []ErrorListener) -> *ProxyErrorListener {
//	if delegates == nil {
//		panic("delegates is not provided")
//	}
//	l := new(ProxyErrorListener)
//	l.delegates = delegates
//	return l
//}
//
//pub fn SyntaxError(recognizer Recognizer, offendingSymbol i32erface{}, line, column i32, msg: &str, e: RecognitionException) {
//	for _, d := range p.delegates {
//		d.SyntaxError(recognizer, offendingSymbol, line, column, msg, e)
//	}
//}
//
//pub fn ReportAmbiguity(recognizer Parser, dfa *DFA, startIndex, stopIndex i32, exact: bool, ambigAlts *BitSet, configs: ATNConfigSet) {
//	for _, d := range p.delegates {
//		d.ReportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs)
//	}
//}
//
//pub fn ReportAttemptingFullContext(recognizer Parser, dfa *DFA, startIndex, stopIndex: i32, conflictingAlts *BitSet, configs: ATNConfigSet) {
//	for _, d := range p.delegates {
//		d.ReportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs)
//	}
//}
//
//pub fn ReportContextSensitivity(recognizer Parser, dfa *DFA, startIndex, stopIndex, prediction: i32, configs: ATNConfigSet) {
//	for _, d := range p.delegates {
//		d.ReportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs)
//	}
//}
